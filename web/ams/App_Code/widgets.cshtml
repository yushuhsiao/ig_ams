@using jqx;
@using ams;
@using ams.Data;
@using System.Text;
@using System.Web.Mvc;
@functions
 {
    //public static void layout_grid_detail(WebViewPage page, jqxGrid grid)
    //{
    //    page.Layout = "~/Views/grid_detail.cshtml";
    //    page.ViewBag.Page = page;
    //    page.ViewBag.grid = grid;
    //}
    public static void layout_2(WebViewPage page, jqxGrid grid)
    {
        page.Layout = "~/Views/_Layout2.cshtml";
        page.ViewBag.Page = page;
        page.ViewBag.grid = grid;
    }
    public static void layout_1(WebViewPage page, jqxGrid grid)
    {
        page.Layout = "~/Views/_Layout.cshtml";
        page.ViewBag.Page = page;
        page.ViewBag.grid = grid;
        grid.toolbarheight = widgets.toolbar_height;
    }

    public const string tran_size = "30%";
    public const int panel_width = 6;
    public const int WIDTH1 = 3;
    public const int WIDTH2 = 12 - WIDTH1 - 1;
    public const int HEIGHT = 25;
    public const int toolbar_height = 27;
    public const string ng_row = "ng_row";
    //public static IHtmlString ng_model2(_WebViewPage page, string model, string field) { return page.Html.Raw("{0}.{1}", model.Trim(false), field.Trim(false)); }
    //public static IHtmlString ng_show2(_WebViewPage page, string model) { return page.Html.Raw("{0}", model); }

    //public static IHtmlString ng_edit_form(jqxGrid grid) { return grid.page.Html.Raw(@"{0}.{1}.isNull || {0}.{1}.isNew""", grid.scope_id, ng_row); }
    //public static IHtmlString ng_add__form(jqxGrid grid) { return grid.page.Html.Raw(@"{0}.{1}.isNew", grid.scope_id, ng_row); }
    //public static IHtmlString ng_model(jqxGrid grid, string field, string grp_name = "")
    //{
    //    return grid.page.Html.Raw("{0}.{1}['{2}'].data.{3}", grid.scope_id, ng_row, grp_name, field.Trim());
    //}
    //public static string _ng_show(jqxGrid grid, string grp_name = "")
    //{
    //    return string.Format("{0}.{1}['{2}'].isEditing", grid.scope_id, ng_row, grp_name);
    //}
    //public static IHtmlString ng_show(jqxGrid grid, string grp_name = "")
    //{
    //    return grid.page.Html.Raw("{0}.{1}['{2}'].isEditing", grid.scope_id, ng_row, grp_name);
    //}
    //private static IHtmlString ng_change(jqxGrid grid, string grp_name)
    //{
    //    if (string.IsNullOrEmpty(grp_name))
    //        return grid.page.Html.Raw("{0}.refreshView()", grid.scope_id);
    //    return null;
    //}
    private static IHtmlString error_msg(jqxGrid grid, string grp_name)
    {
        return grid.page.Html.Raw("{0}.{1}['{2}'].errorMsg()", grid.scope_id, ng_row, grp_name);
    }
    //private static IHtmlString hasError(jqxGrid grid, string grp_name)
    //{
    //    return grid.page.Html.Raw("{0}.{1}['{2}'].hasError()", grid.scope_id, ng_row, grp_name);
    //}
    private static IHtmlString hasError_class(jqxGrid grid, string grp_name)
    {
        return grid.page.Html.Raw("{0}.{1}['{2}'].hasError() ? 'has-error' : ''", grid.scope_id, ng_row, grp_name);
    }

    private static jqxInput _jqxInput() { return new jqxInput { width = "100%", height = HEIGHT }; }
    private static jqxTextArea _jqxTextArea() { return new jqxTextArea { width = "100%", height = HEIGHT }; }
    private static jqxCheckBox _jqxCheckBox1() { return new jqxCheckBox { width = "100%", height = HEIGHT }; }
    private static jqxCheckBox _jqxCheckBox2() { return new jqxCheckBox { width = "100%", height = HEIGHT, locked = true }; }
    private static jqxNumberInput _jqxNumberInput(int? min = null, int? max = null) { return new jqxNumberInput { spinButtons = true, spinMode = inputMode.simple, inputMode = inputMode.simple, autoValidate = false, decimalDigits = 0, width = "100%", min = min, max = max, textAlign = horizontalAlignment.left }; }

    private static jqxTree.source_item new_tree_item(ref bool s, CorpInfo corp)
    {
        var item = new jqxTree.source_item
        {
            id = corp.ID,
            label = corp.UserName,
            value = new { Corp = corp.UserName, Agent = corp.UserName }
        };
        if (!corp.ID.IsRoot)
        {
            item.selected = s;
            s = false;
        }
        return item;
    }
}

@helper jqwidgets()
{
    <link rel="stylesheet" href="~/jqwidgets/styles/jqx-all.less" />@*<script src="~/jqwidgets/jqx-all.js"></script>*@
    <script src="~/jqwidgets/jqxcore.js"></script>
    <script src="~/jqwidgets/jqxdata.js"></script>
    <script src="~/jqwidgets/jqxvalidator.js"></script>
    <script src="~/jqwidgets/jqxbuttons.js"></script>
    <script src="~/jqwidgets/jqxdropdownbutton.js"></script>
    <script src="~/jqwidgets/jqxcolorpicker.js"></script>
    <script src="~/jqwidgets/jqxswitchbutton.js"></script>
    <script src="~/jqwidgets/jqxscrollbar.js"></script>
    <script src="~/jqwidgets/jqxpanel.js"></script>
    <script src="~/jqwidgets/jqxtooltip.js"></script>
    <script src="~/jqwidgets/jqxcalendar.js"></script>
    <script src="~/jqwidgets/jqxdatetimeinput.js"></script>
    <script src="~/jqwidgets/jqxchart.js"></script>
    
    <script src="~/jqwidgets/jqxdraw.js"></script><script src="~/jqwidgets/jqxchart.core.js"></script><script src="~/jqwidgets/jqxchart.rangeselector.js"></script>
    
    <script src="~/jqwidgets/jqxchart.annotations.js"></script>
    <script src="~/jqwidgets/jqxchart.api.js"></script>
    <script src="~/jqwidgets/jqxchart.waterfall.js"></script>
    <script src="~/jqwidgets/jqxgauge.js"></script>
    <script src="~/jqwidgets/jqxcheckbox.js"></script>
    <script src="~/jqwidgets/jqxbuttongroup.js"></script>
    <script src="~/jqwidgets/jqxlistbox.js"></script>
    <script src="~/jqwidgets/jqxtree.js"></script>
    <script src="~/jqwidgets/jqxdragdrop.js"></script>
    <script src="~/jqwidgets/jqxcombobox.js"></script>
    <script src="~/jqwidgets/jqxdropdownlist.js"></script>
    <script src="~/jqwidgets/jqxwindow.js"></script>
    <script src="~/jqwidgets/jqxdocking.js"></script>
    <script src="~/jqwidgets/jqxdockpanel.js"></script>
    <script src="~/jqwidgets/jqxmaskedinput.js"></script>
    <script src="~/jqwidgets/jqxmenu.js"></script>
    <script src="~/jqwidgets/jqxexpander.js"></script>
    <script src="~/jqwidgets/jqxnavigationbar.js"></script>
    <script src="~/jqwidgets/jqxnumberinput.js"></script>
    <script src="~/jqwidgets/jqxprogressbar.js"></script>
    <script src="~/jqwidgets/jqxradiobutton.js"></script>
    <script src="~/jqwidgets/jqxrating.js"></script>
    <script src="~/jqwidgets/jqxslider.js"></script>
    <script src="~/jqwidgets/jqxsplitter.js"></script>
    <script src="~/jqwidgets/jqxtabs.js"></script>
    <script src="~/jqwidgets/jqxgrid.js"></script>
    <script src="~/jqwidgets/jqxgrid.selection.js"></script>
    <script src="~/jqwidgets/jqxgrid.columnsresize.js"></script>
    <script src="~/jqwidgets/jqxgrid.sort.js"></script>
    <script src="~/jqwidgets/jqxgrid.filter.js"></script>
    <script src="~/jqwidgets/jqxgrid.grouping.js"></script>
    <script src="~/jqwidgets/jqxgrid.pager.js"></script>
    <script src="~/jqwidgets/jqxgrid.edit.js"></script>
    <script src="~/jqwidgets/jqxgrid.aggregates.js"></script>
    <script src="~/jqwidgets/jqxdata.export.js"></script>
    <script src="~/jqwidgets/jqxgrid.export.js"></script>
    <script src="~/jqwidgets/jqxgrid.storage.js"></script>
    <script src="~/jqwidgets/jqxgrid.columnsreorder.js"></script>
    <script src="~/jqwidgets/jqxlistmenu.js"></script>
    <script src="~/jqwidgets/jqxknockout.js"></script>
    <script src="~/jqwidgets/jqxscrollview.js"></script>
    <script src="~/jqwidgets/jqxtouch.js"></script>
    <script src="~/jqwidgets/jqxinput.js"></script>
    <script src="~/jqwidgets/jqxresponse.js"></script>
    <script src="~/jqwidgets/jqxtreemap.js"></script>
    <script src="~/jqwidgets/jqxpasswordinput.js"></script>
    <script src="~/jqwidgets/jqxrangeselector.js"></script>
    <script src="~/jqwidgets/jqxdatatable.js"></script>
    <script src="~/jqwidgets/jqxtreegrid.js"></script>
    <script src="~/jqwidgets/jqxbulletchart.js"></script>
    <script src="~/jqwidgets/jqxeditor.js"></script>
    <script src="~/jqwidgets/jqxnotification.js"></script>
    <script src="~/jqwidgets/jqxangular.js"></script>
    <script src="~/jqwidgets/jqxtoolbar.js"></script>
    <script src="~/jqwidgets/jqxcomplexinput.js"></script>
    <script src="~/jqwidgets/jqxformattedinput.js"></script>
    <script src="~/jqwidgets/jqxribbon.js"></script>
    <script src="~/jqwidgets/jqxnavbar.js"></script>
    <script src="~/jqwidgets/jqxfileupload.js"></script>
    <script src="~/jqwidgets/jqxloader.js"></script>
    <script src="~/jqwidgets/jqxtextarea.js"></script>
    <script src="~/jqwidgets/jqxpopover.js"></script>
    <script src="~/jqwidgets/jqxlayout.js"></script>
    <script src="~/jqwidgets/jqxdockinglayout.js"></script>
    <script src="~/jqwidgets/jqxresponsivepanel.js"></script>
    <script src="~/jqwidgets/jqxtagcloud.js"></script>
    <script src="~/jqwidgets/jqxdate.js"></script>
    <script src="~/jqwidgets/jqxscheduler.js"></script>
    <script src="~/jqwidgets/jqxscheduler.api.js"></script>
    <script src="~/jqwidgets/jqxknob.js"></script>
    <script src="~/jqwidgets/jqxsortable.js"></script>
    <script src="~/jqwidgets/jqxkanban.js"></script>
    <script src="~/jqwidgets/jqxbargauge.js"></script>

    @*<script src="~/jqwidgets/jqx-all.js"></script>*@
    <script src="~/js/jqx.js"></script>
}

@helper CommandsEdit(popups.EditControl edit, string text_edit = null, string text_save = null, string text_cancel = null, int label_width = WIDTH1, int btn_width = 3, bool hr = false, string ng_show = null, string ng_hide = null, bool disabled = false)
{
text_edit = text_edit ?? edit.page.lang["Edit"];
text_save = text_save ?? edit.page.lang["Save"];
text_cancel = text_cancel ?? edit.page.lang["Cancel"];
if (hr) { <hr /> }
    <div class="form-group form-group-sm" @{ if (ng_show != null) { <text> ng-show="@ng_show" </text>   } else if (ng_hide != null) { <text> ng-hide="@ng_hide" </text>   } }>
        <div class="col-xs-@btn_width col-sm-offset-@label_width" ng-hide="@edit.IsEditing">
            @if (disabled)
            { <button class="form-control btn btn-default disabled">@text_edit</button> }
            else
            { <button class="form-control btn btn-default" ng-click="@(edit.name).BeginEdit()">@text_edit</button> }
        </div>
        <div class="col-xs-@btn_width col-sm-offset-@label_width" ng-show="@edit.IsEditing">
            @if (disabled)
            { <button class="form-control btn btn-default disabled">@text_cancel</button> }
            else
            { <button class="form-control btn btn-default" ng-click="@(edit.name).EndEdit(false)">@text_cancel</button> }
        </div>
        <div class="col-xs-@btn_width" ng-show="@edit.IsEditing">
            @if (disabled)
            { <button class="form-control btn btn-default disabled">@text_save</button> }
            else
            { <button class="form-control btn btn-default" ng-click="@(edit.name).EndEdit(true)">@text_save</button> }
        </div>
        <div class="col-xs-@(12-label_width-3) col-xs-offset-@label_width" ng-class="@(edit.name).err_class()">
            <span class="help-block">{{@(edit.name).err_msg()}}</span>
        </div>
    </div>
}

@helper CommandsAdd(popups.EditControl edit, int label_width = 3, int btn_width = 3, bool hr = true)
{
if (hr) { <hr /> }
    <div class="form-group form-group-sm">
        <div class="col-xs-@btn_width col-xs-offset-@label_width">
            <button class="form-control btn btn-default" ng-click="@(edit.name).EndCreate(false)">@edit.page.lang["Cancel"]</button>
        </div>
        <div class="col-xs-@btn_width">
            <button class="form-control btn btn-default" ng-click="@(edit.name).EndCreate(true) ">@edit.page.lang["Save"]</button>
        </div>
        <div class="col-xs-@(12-label_width) col-xs-offset-@label_width" ng-class="@(edit.name).err_class()">
            <span class="help-block">{{@(edit.name).err_msg()}}</span>
        </div>
    </div>
}

@helper CommandsAddx(popups.EditControl edit, int label_width = 3, int btn_width = 3, bool hr = true, string url1 = null, string url2 = null)
{
if (url1 == null) { url1 = "null"; }
if (url2 == null) { url2 = "null"; }
if (hr) { <hr /> }
    <div class="form-group form-group-sm">
        <div class="col-xs-@btn_width col-xs-offset-@label_width">
            <button class="form-control btn btn-default" ng-click="@(edit.name).EndCreate(false)">@edit.page.lang["Cancel"]</button>
        </div>
        <div class="col-xs-@btn_width">
            <button class="form-control btn btn-default" ng-click="@(edit.name).EndCreate(true, '@url1')">@edit.page.lang["Save"]</button>
        </div>
        <div class="col-xs-@btn_width">
            <button class="form-control btn btn-default" ng-click="@(edit.name).EndCreate(true, '@url2')">@edit.page.lang["Save & Accept"]</button>
        </div>
        <div class="col-xs-@(12-label_width) col-xs-offset-@label_width" ng-class="@(edit.name).err_class()">
            <span class="help-block">{{@(edit.name).err_msg()}}</span>
        </div>
    </div>
}

@helper control_label(string text, int label_width = WIDTH1)
{ <label class="col-sm-@label_width control-label">@text</label> }

@helper TextBox(popups.EditControl edit, string field, string text = "", int label_width = WIDTH1, int width = WIDTH2)
{
    <div class="form-group form-group-sm">
        @control_label(edit.GetText(text, field), label_width)
        <div class="col-sm-@width">
            <input @_jqxInput() class="bg-dark" readonly ng-model="@edit.ng_model(field)" />
        </div>
    </div>
}

@helper TextInput(popups.EditControl edit, string field, string text = null, bool addonly = false, int label_width = WIDTH1, int width = WIDTH2)
{
    <div class="form-group form-group-sm">
        @control_label(edit.GetText(text, field), label_width)
        <div class="col-sm-@width">
            @if (addonly)
            {
                <input @_jqxInput() ng-model="@edit.ng_model(field)">
            }
            else
            {
                <input @_jqxInput() ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field)" class="bg-dark" readonly>
                <input @_jqxInput() ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field)">
            }
        </div>
    </div>
}

@helper TextArea(popups.EditControl edit, string field, string text, bool addonly = false, int label_width = WIDTH1, int width = WIDTH2, int height = 150)
{
var txt1 = new jqxTextArea() { width = "100%", height = height };
var txt2 = new jqxTextArea() { width = "100%", height = height };
    <div class="form-group form-group-sm">
        @control_label(edit.GetText(text, field), label_width)
        <div class="col-sm-@width">
            @if (addonly)
            {
                <textarea @txt1 ng-model="@edit.ng_model(field)" ng-change="@edit.IsEditing"></textarea>
            }
            else
            {
                <div ng-hide="@edit.IsEditing"><textarea @txt2 ng-model="@edit.ng_model(field)" class="bg-dark" readonly></textarea></div>
                <div ng-show="@edit.IsEditing"><textarea @txt1 ng-model="@edit.ng_model(field)"></textarea></div>
            }
        </div>
    </div>
}

@helper CheckBox(popups.EditControl edit, string field, string text = null, bool addonly = false, int label_width = WIDTH1, int width = 3)
{
    <div class="form-group form-group-sm">
        @control_label(edit.GetText(text, field), label_width)
        <div class="col-sm-@width">
            @if (addonly)
            {
                <div @_jqxCheckBox1() ng-model="@edit.ng_model(field)">@edit.page.lang["Active"]</div>
            }
            else
            {
                <div @_jqxCheckBox2() class="bg-dark" ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field)">@edit.page.lang["Active"]</div>
                <div @_jqxCheckBox1() ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field)">@edit.page.lang["Active"]</div>
            }
        </div>
    </div>
}

@helper Active3(popups.EditControl edit, string text, string text1, string text2, string field1, string field2, bool addonly = false, int label_width = WIDTH1, int width = 3)
{
text1 = edit.GetText(text1, field1);
text2 = edit.GetText(text2, field2);
    <div class="form-group form-group-sm">
        <label class="col-sm-@label_width control-label">@text</label>
        @if (addonly)
        {
            <div class="col-sm-@width"><div @_jqxCheckBox1() ng-model="@edit.ng_model(field1)">@text1</div></div>
            <div class="col-sm-@width"><div @_jqxCheckBox1() ng-model="@edit.ng_model(field2)">@text2</div></div>
        }
        else
        {
            <div class="col-sm-@width">
                <div @_jqxCheckBox2() class="bg-dark" ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field1)">@text1</div>
                <div @_jqxCheckBox1() ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field1)">@text1</div>
            </div>
            <div class="col-sm-@width">
                <div @_jqxCheckBox2() class="bg-dark" ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field2)">@text2</div>
                <div @_jqxCheckBox1() ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field2)">@text2</div>
            </div>
        }
    </div>
}

@helper NumberInput(popups.EditControl edit, string text, string field, bool addonly = false, int? min = null, int? max = null, int label_width = WIDTH1, int width = WIDTH2)
{
    <div class="form-group form-group-sm">
        <label class="col-sm-@label_width control-label">@edit.GetText(text, field)</label>
        <div class="col-sm-@width">
            @if (addonly)
            {
                <div @_jqxNumberInput(min, max) ng-model="@edit.ng_model(field)"></div>
            }
            else
            {
                <input @_jqxInput() class="bg-dark" ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field)" />
                <div @_jqxNumberInput(min, max) ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field)"></div>
            }
        </div>
    </div>
}

@helper SwitchedNumberInput(popups.EditControl edit, string text, string field1, string field2, string text2 = null, bool addonly = false, int? min = null, int? max = null, int label_width = WIDTH1, int width1 = 3, int width2 = 3)
{
var jqx1 = _jqxNumberInput(min, max); jqx1.settings = edit.page._id[jqx1];
var jqx2 = _jqxCheckBox1();
    <div class="form-group form-group-sm">
        <label class="col-sm-@label_width control-label">@edit.GetText(text, field1)</label>
        <script type="text/javascript">
            app_init.push(function ($scope, $compile, $http) {
                $scope['@jqx1.settings'] = { disabled: true };
                $scope.$watch("@edit.ng_model(field2)", function (newValue, oldValue) {
                    $scope['@jqx1.settings'].disabled = !newValue;
                });
            });
        </script>
        @if (addonly)
        {
            <div class="col-sm-@width1" style="padding-right: 0;">
                <div @jqx1 jqx-watch-settings ng-model="@edit.ng_model(field1)"></div>
            </div>
            <div class="col-sm-@width2" style="padding-left: 1em;">
                <div @jqx2 ng-model="@edit.ng_model(field2)">@edit.GetText(text2, field2)</div>
            </div>
        }
        else
        {
            <div class="col-sm-@width1">
                <input @_jqxInput() class="bg-dark" readonly ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field1)" />
                <div @jqx1 jqx-watch-settings ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field1)"></div>
            </div>
            <div class="col-sm-@width2">
                <div @_jqxCheckBox2() class="bg-dark" ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field2)">@edit.GetText(text2, field2)</div>
                <div @jqx2 ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field2)">@edit.GetText(text2, field2)</div>
            </div>
        }
    </div>
}

@helper Password(popups.EditControl edit, string field, string text = null, bool addonly = false, int label_width = WIDTH1, int width = 4)
{ var jqx = (new jqxPasswordInput { height = HEIGHT });
    <div class="form-group form-group-sm">
        <label class="col-sm-@label_width control-label">@edit.GetText(text, field)</label>
        <div class="col-sm-@width">
            @if (addonly)
            {
                <input class="form-control" type="password" @jqx ng-model="@edit.ng_model(field)" />
            }
            else
            {
                <input @jqx class="bg-dark" readonly ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field)" />
                <input @jqx ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field)" />
            }
        </div>
    </div>
}

@helper Password2(popups.EditControl edit, string field, string text = null, int label_width = WIDTH1, int width = 4)
{
    <div class="form-group form-group-sm" ng-show="@edit.IsEditing">
        <label class="col-sm-@label_width control-label">@edit.GetText(text, field)</label>
        <div class="col-sm-@width">
            <input class="form-control" type="password" @(new jqxPasswordInput { height = HEIGHT }) ng-model="@edit.ng_model(field)" />
        </div>
    </div>
}

@helper DropDownList(popups.EditControl edit, jqxDropDownList jqx2, string field, string text, bool addonly = false, object source = null, int label_width = WIDTH1, int width = WIDTH2)
{
    <div class="form-group form-group-sm">
        <label class="col-sm-@label_width control-label">@edit.GetText(text, field)</label>
        <div class="col-sm-@width">
            @if (addonly)
            {
                <div @jqx2 ng-model="@edit.ng_model(field)"></div>
            }
            else
            {
                <input class="bg-dark" readonly @_jqxInput() ng-hide="@edit.IsEditing" ng-model="@edit.ng_model(field)" />
                <div @jqx2 ng-show="@edit.IsEditing" ng-model="@edit.ng_model(field)"></div>
            }
        </div>
    </div>
}


@helper DropDownList1(popups.EditControl edit, string field, string text, bool addonly = false, object source = null, int label_width = WIDTH1, int width = WIDTH2, string displayMember = langHelper.label_name, string valueMember = langHelper.value_name)
{
var jqx2 = new jqxDropDownList { width = "100%", height = HEIGHT, animationType = animationType.none, displayMember = displayMember ?? langHelper.label_name, valueMember = valueMember ?? langHelper.value_name, autoDropDownHeight = false, source = source };
    @DropDownList(edit, jqx2, field, text,addonly, source, label_width, width)
}
@helper DropDownList2(popups.EditControl edit, string field, string text, bool addonly = false, object source = null, int label_width = WIDTH1, int width = WIDTH2, string displayMember = langHelper.label_name, string valueMember = langHelper.value_name)
{
var jqx2 = new jqxDropDownList { width = "100%", height = HEIGHT, animationType = animationType.none, autoDropDownHeight = false, source = source };
    @DropDownList(edit, jqx2, field, text, addonly, source, label_width, width)
}