@using jqx;
@using ams;
@using ams.Data;
@using System.Text;
@using System.Web.Mvc;
@functions
{
    public class nav_tabs : List<tab>, IHtmlString
    {
        public Func<IHtmlString> header;
        public tab active;
        string IHtmlString.ToHtmlString() { return _nav_tabs_string(this).ToHtmlString(); }

        public nav_tabs(params tab[] tab)
        {
            base.AddRange(tab);
            header = header ?? _null.noop<IHtmlString>;
            for (int i = 0; i < this.Count; i++)
            {
                this[i].data_target = string.Format("tab{0}", i + 1);
                this[i].selector = new HtmlString(string.Format(@"a[data-toggle=""tab""][data-target="".tab{0}""]", i + 1));
                if (this[i].Visible)
                {
                    if (this[i].Active || this.active == null) { this.active = this[i]; }
                }
            }
        }

        public tab this[string name] { get { return this.Find((n) => n.name == name); } }

        public string trigger_active
        {
            //@if (tabs.active != null) { < text >$('@tabs.active.selector').trigger('show.bs.tab');</ text > }
            get { return "$('active.selector').trigger('show.bs.tab');"; }
        }
    }
    public class tab
    {
        public string name;
        public bool Active;
        public bool Visible = true;
        public string title;
        public Func<IHtmlString> body;
        internal string data_target;
        public IHtmlString selector;
        public tab() { }
        public tab(string name) { this.name = name; }
    }
}
@helper _nav_tabs_string(popups.nav_tabs src)
{
    <section class="container-fluid form-horizontal">
        @src.header()
        <ul class="nav nav-pills">
            @foreach (var tab in src)
            {
                if (tab.Visible)
                {
                    <li @if (tab == src.active) { <text> class="active" </text>   }><a href="" data-toggle="tab" data-target=".@tab.data_target">@tab.title</a></li> }
            }
        </ul>
        <div class="tab-content">
            @foreach (var tab in src)
            {
                if (tab.Visible)
                { <div class="@tab.data_target row tab-pane fade @if (tab == src.active) { <text>in active</text> } ">@tab.body()</div> }
            }
        </div>
    </section>
}



@functions
{
    public class dialog : IHtmlString
    {
        public _WebViewPage page;
        public string id;
        public string title;

        public dialog(_WebViewPage page, string id)
        {
            this.page = page;
            this.id = id;
            this.Selector = "#" + id;
        }

        public string Selector { get; private set; }

        string IHtmlString.ToHtmlString() { return _modal_dialog(this).ToHtmlString(); }
    }
}
@helper _modal_dialog(dialog src)
{
    <div id="@src.id" class="detail_popup modal fade">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <a style="position: absolute; top:0; right: 0; z-index: 9999" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </a>
                @*<div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                @if (title != null)
                    { <h4 class="modal-title">@title</h4> }
                                </div>*@
                <div class="modal-body">
                    <h4 class="loading hidden">Loading...</h4>
                </div>
                @*<div class="modal-footer">
                    <button type="button" class="btn" data-dismiss="modal">@page.lang["Close"]</button>
                    </div>*@
            </div>
        </div>
    </div>
}
@helper popup_css()
{
    <style type="text/css">
        body {
            overflow: auto;
            height: auto;
        }
        /*.tab-pane .panel:first-child { border-top: 0; }*/
    </style>
}



@functions
{
    public class EditControls
    {
        EditControl[] items;
        public EditControls(params EditControl[] items) { this.items = items; }
        public EditControl this[string key]
        {
            get
            {
                foreach (var n in items)
                    if (n.name == key)
                        return n;
                return null;
            }
        }
    }
    public class EditControl : IHtmlString
    {
        public _WebViewPage page;
        public string name;
        public object row;
        public bool updaterow;
        public string scope_name = "$scope";
        public jqxGrid grid;

        string IHtmlString.ToHtmlString()
        {
            StringBuilder s = new StringBuilder();
            s.Append("{");
            if (this.scope_name != null)
                s.AppendFormat("$scope: {0}, ", scope_name);
            s.AppendFormat("name: '{0}', ", name);
            if (row != null)
                s.AppendFormat("row: {0}, ", json.SerializeObject(row));
            if (updaterow)
                s.AppendFormat("updaterow: true, ");
            this.ToHtmlString(s);
            s.Append("}");
            return s.ToString();
        }
        protected virtual void ToHtmlString(StringBuilder s) { }

        public EditControl(_WebViewPage page, string name)
        {
            this.page = page;
            this.name = name.Trim(false);
        }

        public string ng_model(string field) { return string.Format("{0}.Row.{1}", this.name, field = field.Trim(false)); }
        public string IsEditing { get { return string.Format("{0}.IsEditing", this.name); } }
        public string GetText(string text, string field)
        {
            text = text.Trim(true);
            if ((text == null) && (grid != null))
            {
                var col = grid.GetColumn(field);
                if (col != null)
                    text = col.text;
            }
            return text;
        }

        public HelperResult TextBox(string field, string text = null, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2)
        { return widgets.TextBox(this, field, text, label_width, width); }
        public HelperResult CheckBox(string field, string text = null, int label_width = widgets.WIDTH1, int width = 3)
        { return widgets.CheckBox(this, field, text, this is AddControl, label_width, width); }
        public HelperResult TextInput(string field, string text = null, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2)
        { return widgets.TextInput(this, field, text, this is AddControl, label_width, width); }
        public HelperResult TextArea(string field, string text = null, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2, int height = 150)
        { return widgets.TextArea(this, field, text, this is AddControl, label_width, width, height); }
        public HelperResult Password(string field, string text = null, int label_width = widgets.WIDTH1, int width = 4)
        { return widgets.Password(this, field, text, this is AddControl, label_width, width); }
        public HelperResult Password2(string field, string text = null, int label_width = widgets.WIDTH1, int width = 4)
        { return widgets.Password2(this, field, text, label_width, width); }
        public HelperResult Active3(string text, string text1, string text2, string field1, string field2, int label_width = widgets.WIDTH1, int width = 3)
        { return widgets.Active3(this, text, text1, text2, field1, field2, this is AddControl, label_width, width); }
        public HelperResult SwitchedNumberInput(string text, string field1, string field2, string text2 = null, int? min = null, int? max = null, int label_width = widgets.WIDTH1, int width1 = 3, int width2 = 3)
        { return widgets.SwitchedNumberInput(this, text, field1, field2, text2, this is AddControl, min, max, label_width, width1, width2); }
        public HelperResult NumberInput(string field, string text = null, int? min = null, int? max = null, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2)
        { return widgets.NumberInput(this, text, field, this is AddControl, min, max, label_width, width); }
        public HelperResult control_label(string text, int label_width = widgets.WIDTH1)
        { return widgets.control_label(text, label_width); }
        public HelperResult CommandsEdit(string text_edit = null, string text_save = null, string text_cancel = null, int label_width = widgets.WIDTH1, int btn_width = 3, bool hr = false, string ng_show = null, string ng_hide = null, bool disabled = false)
        { return widgets.CommandsEdit(this, text_edit, text_save, text_cancel, label_width, btn_width, hr, ng_show, ng_hide, disabled); }
        public HelperResult CommandsAdd(int label_width = 3, int btn_width = 3, bool hr = true)
        { return widgets.CommandsAdd(this, label_width, btn_width, hr); }
        public HelperResult CommandsAddx(int label_width = 3, int btn_width = 3, bool hr = true, string url1 = null, string url2 = null)
        { return widgets.CommandsAddx(this, label_width, btn_width, hr, url1, url2); }

        public HelperResult DropDownList1(string field, string text, object source, int label_width = widgets.WIDTH1, int width = 4, string displayMember = langHelper.label_name, string valueMember = langHelper.value_name)
        { return widgets.DropDownList1(this, field, text, this is AddControl, source, label_width, width, displayMember, valueMember); }
        public HelperResult DropDownList2(string field, string text, object source, int label_width = widgets.WIDTH1, int width = 4, string displayMember = langHelper.label_name, string valueMember = langHelper.value_name)
        { return widgets.DropDownList2(this, field, text, this is AddControl, source, label_width, width, displayMember, valueMember); }

        public HelperResult Currency/*      */(string field, int label_width = widgets.WIDTH1, int width = 4)
        { return widgets.DropDownList1(this, field, null, this is AddControl, langHelper.GetEnumsIn(CurrencyCode.IG_Point, CurrencyCode.IG_ECoin, CurrencyCode.TWD, CurrencyCode.CNY, CurrencyCode.HKD, CurrencyCode.USD, CurrencyCode.EUR), label_width, width); }
        public HelperResult PlatformActive/**/(string field, int label_width = widgets.WIDTH1, int width = 4)
        { return widgets.DropDownList1(this, field, null, this is AddControl, langHelper.GetEnums<PlatformActiveState>(null), label_width, width); }
        public HelperResult PlatformType/*  */(string field, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2)
        { return widgets.DropDownList1(this, field, null, this is AddControl, langHelper.GetEnums<ams.PlatformType>(), label_width, width); }
        public HelperResult PlatformList/*  */(string field, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2)
        { return widgets.DropDownList1(this, field, null, this is AddControl, langHelper.PlatformNames(), label_width, width); }
        public HelperResult GameClass/*     */(string field, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2)
        { return widgets.DropDownList1(this, field, null, this is AddControl, langHelper.GetEnums<GameClass>(null), label_width, width); }
        public HelperResult GameList/*      */(string field, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2)
        { return widgets.DropDownList1(this, field, null, this is AddControl, langHelper.GameNames(), label_width, width); }
        public HelperResult PaymentType/*   */(string field, string text = null, int label_width = widgets.WIDTH1, int width = widgets.WIDTH2)
        { return widgets.DropDownList1(this, field, text, this is AddControl, langHelper.GetEnums<ams.PaymentType>(), label_width, width); }
    }
    public class AddControl : EditControl
    {
        public string ID;

        public AddControl(_WebViewPage page, jqxGrid grid = null, string name = "add") : base(page, name)
        {
            this.ID = page._id[this];
            this.grid = grid;
        }

        protected override void ToHtmlString(System.Text.StringBuilder s)
        {
            if (ID != null) s.AppendFormat("modal : '#{0}'", ID);
        }

        public HelperResult modal(params Func<IHtmlString>[] rows) { return _AddForm(this, rows); }
        public HelperResult button() { return _AddButton(this); }
    }
}
@helper _AddButton(AddControl src)
{
    <div class="pull-left" @(new jqxButton { }) ng-click="@(src.name).Create()">
        <i class="fa fa-fw fa-plus"></i>@src.page.lang["Add"]
    </div>
    @*<script type="text/javascript">
            $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
                $scope.addRow = function () {
                    $scope['@src.name'].Row = $.extend(true, {}, $scope['@src.name'].newRow);
                }
            });
        </script>*@
}
@helper _AddForm(AddControl src, Func<IHtmlString>[] rows)
{
    <div id="@src.ID" class="modal fade" style="overflow: hidden; height: 100%;">
        <div class="modal-dialog modal-lg" style="height: 85%;">
            <div class="modal-content" style="height: 100%;">
                <div class="modal-body" style="height: 100%;">
                    <div style="height: 100%; overflow: auto">
                        <section class="container-fluid form-horizontal">
                            @for (int i = 0; i < rows.Length; i++)
                            {
                            <div class="row">
                                @rows[i]()
                            </div>
                            }
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
