@using jqx
@using ams
@using ams.Controllers;
@{
    ViewBag.Title = "Game Log";
    ViewBag.PanelBody = widgets.tran_size;
    jqxGrid grid = new jqxGrid<ams.Data.GameLog>
    {
        page = this,
        scope_id = "grid1",
        showtoolbar = "#toolbar",
        source = { id = "ID", url = Url.GetActionUrl<ReportsApiController>("GetGameLog") },
        pager = { pageable = true, server_paging = true, pagermode = pagermode.simple, },
        filter = { filterable = true, server_filtering = true, showfilterrow = true, showfiltermenuitems = true, },
        sorting = { sortable = true, server_sorting = true, },
        editmode = editmode.selectedcell,
        selectionmode = selectionmode.singlerow,
        //selectedrowindex = 0,
        columns = new jqxGrid._column[] {
            new jqx_column.ActionDropdown(this, "_dropdown") { hidden = false },
            new jqx_column.PlatformID(this),
            new jqx_column.PlatformName(this),
            new jqx_column.PlatformType(this) { hidden = true },
            new jqx_column.GameClass(this),
            new jqx_column.GameID(this) { hidden = true },
            new jqx_column.GameName(this) { width = 120 },
            new jqx_column.CorpID(this),
            new jqx_column.CorpName(this) { root = false },
            new jqx_column.ParentID(this) { hidden = true },
            new jqx_column.ParentName(this),
            new jqx_column.UserID(this),
            new jqx_column.UserName(this),
            new jqx_column._number(this, "Depth") { hidden = true },
            new jqx_column.DateTime(this, "PlayStartTime"),
            new jqx_column.DateTime(this, "PlayEndTime "),
            new jqx_column._string(this, "SerialNumber"),
            new jqx_column.Amount(this, "BetAmount"),
            new jqx_column.Amount(this, "WinAmount"),
            new jqx_column.Amount(this, "Amount"),
            new jqx_column.Amount(this, "TotalFees"),
            new jqx_column.Amount(this, "DcFine"),
            new jqx_column.Amount(this, "DcCompe"),
            new jqx_column.Amount(this, "PlayerCount"),
            new jqx_column._string(this, "JPType") { width = 100 },
            new jqx_column._string(this, "ActionType") { width = 100 },
            new jqx_column._string(this, "GameType") { width = 100 },
            new jqx_column.Amount(this, "Base") { width = 100 },
            new jqx_column.Amount(this, "Ratio") { width = 100 },
            new jqx_column.Amount(this, "Jackpot") { width = 100 },
            new jqx_column.Amount(this, "BaseAmount") { width = 100 },
            new jqx_column.Amount(this, "FillAmount") { width = 100 },
            new jqx_column.Amount(this, "JP_GRAND") { width = 100 },
            new jqx_column.Amount(this, "JP_MAJOR") { width = 100 },
            new jqx_column.Amount(this, "JP_MINOR") { width = 100 },
            new jqx_column.Amount(this, "JP_MINI") { width = 100 },
            new jqx_column.Currency(this, "CurrencyA"){ hidden = true },
            new jqx_column.Currency(this, "CurrencyB"){ hidden = true },
            new jqx_column.Amount(this, "CurrencyX") { hidden = true },
            new jqx_column._string(this, "sn") { width = 100 },
            new jqx_column._string(this, "GroupID"),
            new jqx_column.DateTime(this, "CreateTime "),
        }
    };
    widgets.layout_1(this, grid);
    //widgets.layout_2(this, grid);
    //Layout = "~/Views/_Layout.cshtml";
}
@section head {
    <script type="text/javascript">
        $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
            window.$grid1 = $scope['@grid.scope_id'] = $('#_grid1').jqxGridEx($.n(@grid), {
                columns: [
                    {
                        name: '_dropdown', buttonclick: function () {
                            console.log(this, arguments);
                        },
                        renderbuttoncell: function ($grid, element, column, row, text) {
                            console.log(this, arguments);
                        },
                        //cellsrenderer: function (row, columnfield, value, defaulthtml, columnproperties, rowdata) {
                        //    return defaulthtml;
                        //    return this.owner._defaultcellsrenderer('@lang["Replay"]', this);
                        //}
                    }
                ],
                ext: {
                },
            });
        });
    </script>
}
<div id="toolbar" class="hidden">
    @toolbars.GridRefresh(grid, true)
</div>
<div id="_grid1"></div>
