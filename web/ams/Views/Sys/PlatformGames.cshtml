@using jqx
@using ams
@using ams.Data
@using ams.Controllers;
@{
    popups.dialog modal_dialog = new popups.dialog(this, "_modal1");
    ViewBag.Title = "PlatformGames";
    jqxGrid grid = new jqxGrid<PlatformGameInfo>
    {
        page = this,
        scope_id = "grid1",
        showtoolbar = "#toolbar",
        source = { id = "ID", url = Url.GetActionUrl<PlatformGamesApiController>("list"), },
        //rowdetail = { rowdetails = false, showrowdetailscolumn = true, rowdetailshidden = true, rowdetailsheight = 200 },
        //pager = { pageable = false, server_paging = true, pagermode = pagermode.simple, pagesize = 100 },
        pager = { pagesize = 1000, pageable = true },
        filter = { filterable = true, server_filtering = true, showfilterrow = true, showfiltermenuitems = false, },
        sorting = { sortable = true, server_sorting = true, },
        //selectedrowindex = 0,
        columns = new jqxGrid._column[] {
            new jqx_column.ActionPopup(this, "_popup1") { ButtonText = "Details", modal = modal_dialog, cellsalign = alignment.center },
            new jqx_column.ver(this),
            new jqx_column.PlatformID(this) { hidden = true },
            new jqx_column.PlatformName(this) { hidden = false },
            //new jqx_column.GameClass(this),
            new jqx_column.GameID(this) { hidden = true },
            new jqx_column.GameName(this) { width = 150, cellsalign = alignment.left },
            new jqx_column._number(this, "EprobGroup", lang["Eprob"]) { width = 60 },
            new jqx_column._number(this, "ConfigKeys", lang["Configs"]) { width = 60 },
            new jqx_column._string(this, "OriginalID") { hidden = true },
            //new jqxGrid._column { _datafield = { name = "Active      ", type = dataFieldType._bool__ }, text = lang["State       "], width = 50, columntype = columntype.checkbox },
            new jqx_column.CreateTime(this), new jqx_column.CreateUser(this), new jqx_column.ModifyTime(this), new jqx_column.ModifyUser(this),
            new jqx_column.ID2(this, "ID") { hidden = true },
        }
    };
    widgets.layout_1(this, grid);
}
@if (IsDetails)
{
    GeniusBull.Game game = GeniusBull.Game.Null;
    PlatformGameInfo p1 = null;
    Guid guid;
    if (Request.QueryString.ToString().ToGuid(out guid))
    {
        p1 = PlatformGameInfo.GetItem(guid);
        game = GeniusBull.Game.GetGame(p1);
        ViewBag.Title += ":" + game.Name;
    }
    popups.EditControl edit3 = new popups.EditControl(this, "edit3") { };
    popups.EditControl edit4 = new popups.EditControl(this, "edit4") { };
    popups.nav_tabs tabs = new popups.nav_tabs(
        new popups.tab("a") { title = lang["EprobTable"], body = () => tab1(game), Visible = game.HasEprobTable(), },
        new popups.tab("b") { title = lang["GameConfig"], body = () => tab2(game, edit3), Visible = game.HasGameConfig(), },
        new popups.tab("c") { title = lang["TableSettings"], body = () => tab3(game, edit4), Visible = game.HasTableSettings() })
    { header = () => tab0(p1) };

    @section head {
        @popups.popup_css()
        <script type="text/javascript">
            function EprobObj(opts) {
                //var symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', 'Wild', 'FG', 'Scatter', 'JP', 'BG1', 'BG2', 'BG3', 'BG4', 'BG5'];
                var reels = [0, 1, 2, 3, 4];
                var lines = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
                var sumbol_BG = ['BG1', 'BG2', 'BG3', 'BG4', 'BG5'];


                var _obj = this;
                this.LoadEprobGroup = function (data) {
                    if ($.isArray(data)) {
                        _obj.Groups = data;
                        _obj.Groups_Select = null;
                        _obj.Groups_Active = null;
                        _obj.Table = null;
                        for (var i = 0; i < _obj.Groups.length; i++)
                            if (_obj.Groups[i].Selected === true)
                                _obj.Groups_SetActive(_obj.Groups_Select = _obj.Groups[i].Eprob);
                        opts.$scope.$applyAsync();
                    }
                }
                this.LoadEprobTable = function (data) {
                    if (data) {
                        _obj.Table = data;
                        opts.$scope.$applyAsync();
                        _obj.Calc();
                    }
                }
                this.SaveEprobTable = function () {
                    var table = _obj.Table;
                    _obj.Table = null;
                    opts.$scope.$applyAsync();
                    $.invoke_api({
                        url: opts.url_SetEprobTable,
                        data: { ID: opts.ID, Eprob: _obj.Groups_Active, EprobTable: table },
                        success: function (data, textStatus, jqXHR) { _obj.LoadEprobTable(data); },
                        error: function (jqXHR, textStatus, errorThrown) { },
                        complete: function (jqXHR, textStatus) { }
                    });
                }
                this.Groups_SetActive = function (n) {
                    _obj.Groups_Active = n;
                    _obj.Table = null;
                    opts.$scope.$applyAsync();
                    $.invoke_api({
                        url: opts.url_GetEprobTable,
                        data: { ID: opts.ID, Eprob: n },
                        success: function (data, textStatus, jqXHR) { _obj.LoadEprobTable(data); },
                        error: function (jqXHR, textStatus, errorThrown) { },
                        complete: function (jqXHR, textStatus) { }
                    });
                }
                this.Group_SetSelect = function () {
                    _obj.Table = null;
                    opts.$scope.$applyAsync();
                    $.invoke_api({
                        url: opts.url_SetEprobGroup,
                        data: { ID: opts.ID, SetActive: _obj.Groups_Active },
                        success: function (data, textStatus, jqXHR) { _obj.LoadEprobGroup(data); },
                        error: function (jqXHR, textStatus, errorThrown) { },
                        complete: function (jqXHR, textStatus) { }
                    });
                }
                this.Group_Reload = function () {
                    _obj.Table = null;
                    opts.$scope.$applyAsync();
                    $.invoke_api({
                        url: opts.url_GetEprobGroup,
                        data: { ID: opts.ID },
                        success: function (data, textStatus, jqXHR) { _obj.LoadEprobGroup(data); },
                        error: function (jqXHR, textStatus, errorThrown) { },
                        complete: function (jqXHR, textStatus) { }
                    });
                }
                this.Group_Reload();

                this.getRate = function (name, index) {
                    if (_obj.Result == null) return;
                    if (_obj.Table == null) return;
                    var n1 = _obj.Result.ReelSum[index];
                    if (n1 == 0)
                        return 0;
                    else
                        return (_obj.Table[name].Reel[index] / n1) * 100;
                }

                var ttt_null = { Reel: [0, 0, 0, 0, 0], PayRate: { X3: 0, X4: 0, X5: 0 } };

                this.Calc = function () {
                    _obj.Result = {
                        ReelSum: [0, 0, 0, 0, 0],
                        Values: {
                            FG: { PayRate: { X3: 0, X4: 0, X5: 0 } }
                        },
                    };
                    if (_obj.Table == null) return;
                    var tt = _obj.Table;
                    var rr = _obj.Result;
                    var vvv, ttt;

                    reels.forEach(function (n1) {
                        for (var n2 in tt) {
                            rr.ReelSum[n1] += tt[n2].Reel[n1];
                        }
                    });
                    rr.ReelSum_Mul = rr.ReelSum[0] * rr.ReelSum[1] * rr.ReelSum[2] * rr.ReelSum[3] * rr.ReelSum[4];

                    rr.XTotal = 0;
                    rr.PTotal = 0;
                    lines.forEach(function (n) {
                        if (!tt.hasOwnProperty(n)) return;
                        if (rr.Values.hasOwnProperty(n)) vvv = rr.Values[n]; else vvv = rr.Values[n] = {};
                        ttt = tt[n];

                        var wild;
                        if (tt.hasOwnProperty('Wild'))
                            wild = tt['Wild'];
                        else
                            wild = { Reel: [0, 0, 0, 0, 0] };

                        vvv.X3 = (ttt.Reel[0] + wild.Reel[0]) * (ttt.Reel[1] + wild.Reel[1]) * (ttt.Reel[2] + wild.Reel[2]) * (rr.ReelSum[3] - ttt.Reel[3] + wild.Reel[3]) * (rr.ReelSum[4]);
                        vvv.X4 = (ttt.Reel[0] + wild.Reel[0]) * (ttt.Reel[1] + wild.Reel[1]) * (ttt.Reel[2] + wild.Reel[2]) * (ttt.Reel[3] + wild.Reel[3]) * (rr.ReelSum[4] - ttt.Reel[4] - wild.Reel[4]);
                        vvv.X5 = (ttt.Reel[0] + wild.Reel[0]) * (ttt.Reel[1] + wild.Reel[1]) * (ttt.Reel[2] + wild.Reel[2]) * (ttt.Reel[3] + wild.Reel[3]) * (ttt.Reel[4] + wild.Reel[4]);
                        vvv.XSum = vvv.X3 + vvv.X4 + vvv.X5;
                        rr.XTotal += vvv.XSum;
                        vvv.Pay1 = vvv.X3 * ttt.PayRate.X3;
                        vvv.Pay2 = vvv.X4 * ttt.PayRate.X4;
                        vvv.Pay3 = vvv.X5 * ttt.PayRate.X5;
                        vvv.PSum = vvv.Pay1 + vvv.Pay2 + vvv.Pay3;
                        rr.PTotal += vvv.PSum;
                    });
                    ['FG'].forEach(function (n) {
                        vvv = rr.Values[n] = {};
                        if (tt.hasOwnProperty(n)) ttt = tt[n]; else ttt = ttt_null;
                        vvv.X3 = 0;
                        vvv.X4 = 0;
                        vvv.X5 = 0;
                        vvv.XSum = vvv.X3 + vvv.X4 + vvv.X5;
                        vvv.Pay1 = vvv.X3 * ttt.PayRate.X3;
                        vvv.Pay2 = vvv.X4 * ttt.PayRate.X4;
                        vvv.Pay3 = vvv.X5 * ttt.PayRate.X5;
                        vvv.PSum = vvv.Pay1 + vvv.Pay2 + vvv.Pay3;
                    });
                    ['JP'].forEach(function (n) {
                        vvv = rr.Values[n] = {};
                        ttt = tt[n];
                        vvv.X2 = ((ttt.Reel[0]) * (ttt.Reel[1]) * (rr.ReelSum[2] - ttt.Reel[2]) * (rr.ReelSum[3] - ttt.Reel[3]) * (rr.ReelSum[4] * ttt.Reel[4])) / rr.ReelSum_Mul;
                        vvv.X3 = ((ttt.Reel[0]) * (ttt.Reel[1]) * (/*           */ ttt.Reel[2]) * (rr.ReelSum[3] - ttt.Reel[3]) * (rr.ReelSum[4] - ttt.Reel[4])) / rr.ReelSum_Mul;
                        vvv.X4 = ((ttt.Reel[0]) * (ttt.Reel[1]) * (/*           */ ttt.Reel[2]) * (/*           */ ttt.Reel[3]) * (rr.ReelSum[4] - ttt.Reel[4])) / rr.ReelSum_Mul;
                        vvv.X5 = ((ttt.Reel[0]) * (ttt.Reel[1]) * (/*           */ ttt.Reel[2]) * (/*           */ ttt.Reel[3]) * (/*           */ ttt.Reel[4])) / rr.ReelSum_Mul;
                        vvv.Pay0 = vvv.X2 * ttt.PayRate.X2;
                        vvv.Pay1 = vvv.X3 * ttt.PayRate.X3;
                        vvv.Pay2 = vvv.X4 * ttt.PayRate.X4;
                        vvv.Pay3 = vvv.X5 * ttt.PayRate.X5;
                        vvv.PSum = vvv.Pay0 + vvv.Pay1 + vvv.Pay2 + vvv.Pay3;
                    });
                    sumbol_BG.forEach(function (BGn) {
                        if (tt.hasOwnProperty(BGn)) ttt = tt[BGn]; else return;
                        vvv = rr.Values[BGn] = {};
                        vvv.X3 = (ttt.Reel[0] * ttt.Reel[1] * ttt.Reel[2] * (rr.ReelSum[3] - ttt.Reel[3]) * rr.ReelSum[4]) / rr.ReelSum_Mul;
                        vvv.X4 = (ttt.Reel[0] * ttt.Reel[1] * ttt.Reel[2] * ttt.Reel[3] * (rr.ReelSum[4] - ttt.Reel[4])) / rr.ReelSum_Mul;
                        vvv.X5 = (ttt.Reel[0] * ttt.Reel[1] * ttt.Reel[2] * ttt.Reel[3] * ttt.Reel[4]) / rr.ReelSum_Mul;
                        vvv.XSum = vvv.X3 + vvv.X4 + vvv.X5;
                        vvv.Pay1 = vvv.X3 * ttt.PayRate.X3;
                        vvv.Pay2 = vvv.X4 * ttt.PayRate.X4;
                        vvv.Pay3 = vvv.X5 * ttt.PayRate.X5;
                        vvv.PSum = vvv.Pay1 + vvv.Pay2 + vvv.Pay3;
                    });

                    rr.WinningRate = rr.XTotal / rr.ReelSum_Mul + (rr.Values.FG.PSum + rr.Values.JP.PSum);
                    rr.Line_RTP = rr.PTotal / rr.ReelSum_Mul;
                    rr.FG_RTP = rr.Values.FG.PSum;
                    rr.JP_RTP = rr.Values.JP.PSum;
                    //rr.BG1_RTP = rr.Values.BG1.PSum;
                    rr.Total_RTP = rr.Line_RTP + rr.FG_RTP + rr.JP_RTP;
                    sumbol_BG.forEach(function (BGn) {
                        if (rr.Values.hasOwnProperty(BGn)) {
                            rr[BGn + '_RTP'] = rr.Values[BGn].PSum;
                            rr.Total_RTP += rr.Values[BGn].PSum;
                            rr.WinningRate += rr.Values[BGn].PSum;
                        }
                    });
                    console.log('Calc()', _obj);
                }

                //_obj.PayTable = {
                //    'X3': { '1': 2, '2': 3, '3': 5, '4': 8, '5': 10, '6': 15, '7': 30, '8': 50, 'Wild': 0, 'FG': 0, 'JP': 0.15, 'BG1': 3.165 },
                //    'X4': { '1': 20, '2': 30, '3': 50, '4': 80, '5': 100, '6': 150, '7': 300, '8': 500, 'Wild': 0, 'FG': 0, 'JP': 5, 'BG1': 6.33 },
                //    'X5': { '1': 200, '2': 300, '3': 500, '4': 800, '5': 1000, '6': 1500, '7': 3000, '8': 5000, 'Wild': 0, 'FG': 0, 'JP': 50, 'BG1': 15.825 },
                //};

                //function getSum(index) {
                //    var nn = 0;
                //    if (_obj.Table != null)
                //        for (var n in _obj.Table)
                //            nn += _obj.Table[n].Reel[index];
                //    return nn;
                //}
                //function mulSum() { return getSum(0) * getSum(1) * getSum(2) * getSum(3) * getSum(4); }

                //function getTable(symbol, reel) {
                //    if (_obj.Table != null) {
                //        if (_obj.Table[symbol]) {
                //            return _obj.Table[symbol][reel];
                //        }
                //    }
                //}

                //function has_line(name) {
                //    if (_obj.Table == null) return false;
                //    return _obj.Table.hasOwnProperty(name);
                //}

                //lines.forEach(function (n) {
                //    Object.defineProperty(_obj, "PayA1_" + n, {
                //        get: function () {
                //            if (_obj.Table != null)
                //                return (_obj.Table[n].Reel[0] + _obj.Table['Wild'].Reel[0]) *
                //                       (_obj.Table[n].Reel[1] + _obj.Table['Wild'].Reel[1]) *
                //                       (_obj.Table[n].Reel[2] + _obj.Table['Wild'].Reel[2]) *
                //                       (getSum(3) - _obj.Table[n].Reel[3] - _obj.Table['Wild'].Reel[3]) *
                //                       (getSum(4));
                //        }
                //    });
                //    Object.defineProperty(_obj, "PayA2_" + n, {
                //        get: function () {
                //            if (_obj.Table != null)
                //                return (_obj.Table[n].Reel[0] + _obj.Table['Wild'].Reel[0]) *
                //                       (_obj.Table[n].Reel[1] + _obj.Table['Wild'].Reel[1]) *
                //                       (_obj.Table[n].Reel[2] + _obj.Table['Wild'].Reel[2]) *
                //                       (_obj.Table[n].Reel[3] + _obj.Table['Wild'].Reel[3]) *
                //                       (getSum(4) - _obj.Table[n].Reel[4] - _obj.Table['Wild'].Reel[4]);
                //        }
                //    });
                //    Object.defineProperty(_obj, "PayA3_" + n, {
                //        get: function () {
                //            if (_obj.Table != null)
                //                return (_obj.Table[n].Reel[0] + _obj.Table['Wild'].Reel[0]) *
                //                       (_obj.Table[n].Reel[1] + _obj.Table['Wild'].Reel[1]) *
                //                       (_obj.Table[n].Reel[2] + _obj.Table['Wild'].Reel[2]) *
                //                       (_obj.Table[n].Reel[3] + _obj.Table['Wild'].Reel[3]) *
                //                       (_obj.Table[n].Reel[4] + _obj.Table['Wild'].Reel[4]);
                //        }
                //    });
                //    Object.defineProperty(_obj, "PayA_Sum_" + n, { get: function () { return _obj['PayA1_' + n] + _obj['PayA2_' + n] + _obj['PayA3_' + n]; } });

                //    Object.defineProperty(_obj, "PayB1_" + n, { get: function () { return _obj['PayA1_' + n] * _obj.Table[n].PayRate['X3']; } });
                //    Object.defineProperty(_obj, "PayB2_" + n, { get: function () { return _obj['PayA2_' + n] * _obj.Table[n].PayRate['X4']; } });
                //    Object.defineProperty(_obj, "PayB3_" + n, { get: function () { return _obj['PayA3_' + n] * _obj.Table[n].PayRate['X5']; } });
                //    Object.defineProperty(_obj, "PayB_Sum_" + n, { get: function () { return _obj['PayB1_' + n] + _obj['PayB2_' + n] + _obj['PayB3_' + n]; } });
                //});

                //    Object.defineProperty(_obj, "Sum_Reel_1", { get: function () { return getSum(0); } });
                //    Object.defineProperty(_obj, "Sum_Reel_2", { get: function () { return getSum(1); } });
                //    Object.defineProperty(_obj, "Sum_Reel_3", { get: function () { return getSum(2); } });
                //    Object.defineProperty(_obj, "Sum_Reel_4", { get: function () { return getSum(3); } });
                //    Object.defineProperty(_obj, "Sum_Reel_5", { get: function () { return getSum(4); } });

                //    Object.defineProperty(_obj, "Total_PayA_Sum", {
                //        get: function () {
                //            var ret = 0;
                //            if (_obj.Table != null) {
                //                for (var i in lines) {
                //                    var n = lines[i];
                //                    if (_obj.Table.hasOwnProperty(n))
                //                        ret += _obj['PayA_Sum_' + n];
                //                }
                //            }
                //            return ret;
                //        }
                //    });
                //    Object.defineProperty(_obj, "Total_PayB_Sum", {
                //        get: function () {
                //            var ret = 0;
                //            if (_obj.Table != null) {
                //                for (var i in lines) {
                //                    var n = lines[i];
                //                    if (_obj.Table.hasOwnProperty(n))
                //                        ret += _obj['PayB_Sum_' + n];
                //                }
                //            }
                //            return ret;
                //        }
                //    });

                //    Object.defineProperty(_obj, "Line_RTP", { get: function () { return _obj.Total_PayB_Sum / (_obj.Sum_Reel_1 * _obj.Sum_Reel_2 * _obj.Sum_Reel_3 * _obj.Sum_Reel_4 * _obj.Sum_Reel_5); } });
                //    Object.defineProperty(_obj, "PayA1_FG", { get: function () { return 0; } });
                //    Object.defineProperty(_obj, "PayA2_FG", { get: function () { return 0; } });
                //    Object.defineProperty(_obj, "PayA3_FG", { get: function () { return 0; } });
                //    Object.defineProperty(_obj, "PayA_Sum_FG", { get: function () { return _obj.PayA1_FG + _obj.PayA2_FG + _obj.PayA3_FG; } });
                //    Object.defineProperty(_obj, "PayB1_FG", { get: function () { return _obj.PayA1_FG * _obj.Table.FG.PayRate.X3; } });
                //    Object.defineProperty(_obj, "PayB2_FG", { get: function () { return _obj.PayA2_FG * _obj.Table.FG.PayRate.X4; } });
                //    Object.defineProperty(_obj, "PayB3_FG", { get: function () { return _obj.PayA3_FG * _obj.Table.FG.PayRate.X5; } });
                //    Object.defineProperty(_obj, "Free_Game_RTP", { get: function () { return _obj.PayB1_FG + _obj.PayB2_FG + _obj.PayB3_FG; } });
                //    Object.defineProperty(_obj, "PayA0_JP", { get: function () { return (_obj.Table['JP'].Reel[0] * _obj.Table['JP'].Reel[1] * (getSum(2) - _obj.Table['JP'].Reel[2]) * (getSum(3) - _obj.Table['JP'].Reel[3]) * (getSum(4) - _obj.Table['JP'].Reel[4])) / mulSum(); } });
                //    Object.defineProperty(_obj, "PayA1_JP", { get: function () { return (_obj.Table['JP'].Reel[0] * _obj.Table['JP'].Reel[1] * /*       */ (_obj.Table['JP'].Reel[2]) * (getSum(3) - _obj.Table['JP'].Reel[3]) * (getSum(4) - _obj.Table['JP'].Reel[4])) / mulSum(); } });
                //    Object.defineProperty(_obj, "PayA2_JP", { get: function () { return (_obj.Table['JP'].Reel[0] * _obj.Table['JP'].Reel[1] * /*       */ (_obj.Table['JP'].Reel[2]) * /*       */ (_obj.Table['JP'].Reel[3]) * (getSum(4) - _obj.Table['JP'].Reel[4])) / mulSum(); } });
                //    Object.defineProperty(_obj, "PayA3_JP", { get: function () { return (_obj.Table['JP'].Reel[0] * _obj.Table['JP'].Reel[1] * /*       */ (_obj.Table['JP'].Reel[2]) * /*       */ (_obj.Table['JP'].Reel[3]) * /*       */ (_obj.Table['JP'].Reel[4])) / mulSum(); } });
                //    Object.defineProperty(_obj, "PayA_Sum_JP", { get: function () { return _obj.PayA0_JP + _obj.PayA1_JP + _obj.PayA2_JP + _obj.PayA3_JP; } });
                //    Object.defineProperty(_obj, "PayB0_JP", { get: function () { return _obj.PayA0_JP * 0.5; } });
                //    Object.defineProperty(_obj, "PayB1_JP", { get: function () { return _obj.PayA1_JP * _obj.Table['JP'].PayRate.X3; } });
                //    Object.defineProperty(_obj, "PayB2_JP", { get: function () { return _obj.PayA2_JP * _obj.Table['JP'].PayRate.X4; } });
                //    Object.defineProperty(_obj, "PayB3_JP", { get: function () { return _obj.PayA3_JP * _obj.Table['JP'].PayRate.X5; } });
                //    Object.defineProperty(_obj, "Jackpot_RTP", { get: function () { return _obj.PayB0_JP + _obj.PayB1_JP + _obj.PayB2_JP + _obj.PayB3_JP; } });
                //    ['BG1', 'BG2', 'BG3', 'BG4', 'BG5'].forEach(function (BGn) {
                //        Object.defineProperty(_obj, "PayA1_" + BGn, { get: function () { return (_obj.Table[BGn].Reel[0] * _obj.Table[BGn].Reel[1] * _obj.Table[BGn].Reel[2] * (getSum(3) - _obj.Table[BGn].Reel[3]) * (getSum(4) - _obj.Table[BGn].Reel[4])) / mulSum(); } });
                //        Object.defineProperty(_obj, "PayA2_" + BGn, { get: function () { return (_obj.Table[BGn].Reel[0] * _obj.Table[BGn].Reel[1] * _obj.Table[BGn].Reel[2] * /*       */ (_obj.Table[BGn].Reel[3]) * (getSum(4) - _obj.Table[BGn].Reel[4])) / mulSum(); } });
                //        Object.defineProperty(_obj, "PayA3_" + BGn, { get: function () { return (_obj.Table[BGn].Reel[0] * _obj.Table[BGn].Reel[1] * _obj.Table[BGn].Reel[2] * /*       */ (_obj.Table[BGn].Reel[3]) * /*       */ (_obj.Table[BGn].Reel[4])) / mulSum(); } });
                //        Object.defineProperty(_obj, "PayA_Sum_" + BGn, { get: function () { return _obj['PayA1_' + BGn] + _obj['PayA2_' + BGn] + _obj['PayA3_' + BGn]; } });
                //        Object.defineProperty(_obj, "PayB1_" + BGn, { get: function () { return _obj['PayA1_' + BGn] * _obj.Table[BGn].PayRate['X3']; } });
                //        Object.defineProperty(_obj, "PayB2_" + BGn, { get: function () { return _obj['PayA2_' + BGn] * _obj.Table[BGn].PayRate['X4']; } });
                //        Object.defineProperty(_obj, "PayB3_" + BGn, { get: function () { return _obj['PayA3_' + BGn] * _obj.Table[BGn].PayRate['X5']; } });
                //        Object.defineProperty(_obj, "PayB3_Sum_" + BGn, { get: function () { return _obj['PayB1_' + BGn] + _obj['PayB2_' + BGn] + _obj['PayB3_' + BGn]; } });
                //    });
                //    Object.defineProperty(_obj, "Bonus_Game_RTP", { get: function () { _obj.PayB3_Sum_BG1; } });
                //    Object.defineProperty(_obj, "Total_RTP", {
                //        get: function () {
                //            var ret = _obj.Line_RTP;
                //            if (_obj.Table.hasOwnProperty('FG')) ret += _obj.Free_Game_RTP;
                //            if (_obj.Table.hasOwnProperty('JP')) ret += _obj.Jackpot_RTP;
                //            if (_obj.Table.hasOwnProperty('BG1')) ret += _obj.PayB3_Sum_BG1;
                //            return ret;
                //        }
                //    });

                //    _obj._debug = function () {
                //        var ret = new Array();
                //        var n1 = Object.getOwnPropertyNames(_obj);
                //        for (var i = 0; i < n1.length; i++) {
                //            switch (n1[i]) {
                //                case 'getRate':
                //                case 'LoadEprobGroup':
                //                case 'LoadEprobTable':
                //                case 'SaveEprobTable':
                //                case 'Groups_SetActive':
                //                case 'Group_SetSelect':
                //                case 'Group_Reload':
                //                case 'Groups_Select':
                //                case 'Groups_Active':
                //                case 'Groups':
                //                case 'Table':
                //                case '_debug':
                //                    break;
                //                default:
                //                    ret.push(n1[i]);
                //                    break;
                //            }
                //        }
                //        return ret;
                //    }
            }
        </script>
        <script type="text/javascript">
            $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
                new $.EditControl($.n(@edit3), {
                    OnLoading: function (data, jqXHR, settings) {
                        settings.url = '@(Url.GetActionUrl<GeniusBull.GeniusBullSysApiController>("GetConfigValues"))';
                        settings.data = { ID: '@guid' };
                    },
                    OnUpdate: function (data, jqXHR, settings) {
                        settings.url = '@(Url.GetActionUrl<GeniusBull.GeniusBullSysApiController>("SetConfigValues"))';
                        settings.data = { ID: '@guid', ConfigValue: $scope['@edit3.name'].Row };
                    }
                });
                new $.EditControl($.n(@edit4), {
                    OnLoading: function (data, jqXHR, settings) {
                        settings.url = '@(Url.GetActionUrl<GeniusBull.GeniusBullSysApiController>("GetTableSettingList"))';
                        settings.data = { ID: '@guid' };
                    },
                    OnLoadComplete: function (data, textStatus, jqXHR) {
                        this.ActiveId = null;
                        if ($.isArray(data)) {
                            var ret = {};
                            for (var i = 0; i < data.length; i++) {
                                if (i == 0) this.ActiveId = data[i].Id;
                                ret[data[i].Id] = data[i];
                            }
                            return ret;
                        }
                    },
                    OnUpdate: function (data, jqXHR, settings) {
                        var row = this.Row[this.ActiveId];
                        if (row == null) return;
                        settings.url = '@(Url.GetActionUrl<GeniusBull.GeniusBullSysApiController>("SetTableSetting"))';
                        settings.data = { ID: '@guid', ParamID: row.Id, TableSetting: row };
                    },
                    OnUpdateComplete: function (data, textStatus, jqXHR) {
                        this.Row[data.Id] = data;
                        return this.Row;
                    },
                });
                $scope.Close_Click = function () {
                    window.frameElement.get_modal().modal('hide');
                }

                $('@tabs["a"].selector').on('show.bs.tab', function (e) {
                    if ($scope.Eprob == null)
                        $scope.Eprob = new EprobObj({
                            $scope: $scope,
                            ID: '@guid',
                            url_SetEprobTable: '@(Url.GetActionUrl<GeniusBull.GeniusBullSysApiController>("SetEprobTable"))',
                            url_GetEprobTable: '@(Url.GetActionUrl<GeniusBull.GeniusBullSysApiController>("GetEprobTable"))',
                            url_SetEprobGroup: '@(Url.GetActionUrl<GeniusBull.GeniusBullSysApiController>("SetEprobGroup"))',
                            url_GetEprobGroup: '@(Url.GetActionUrl<GeniusBull.GeniusBullSysApiController>("GetEprobGroup"))',
                        });
                });
                $('@tabs["b"].selector').on('show.bs.tab', function (e) {
                    $scope['@edit3.name'].LoadData();
                })
                $('@tabs["c"].selector').on('show.bs.tab', function (e) {
                    $scope['@edit4.name'].LoadData();
                })

                @if (tabs.active != null) { <text>$('@tabs.active.selector').trigger('show.bs.tab');</text> }
            });
        </script>
    }

    @tabs
    @helper tab0(PlatformGameInfo p1)
    {
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="h4 col-sm-7 text-nowrap" style="margin: 0;">@LangItem.EnumsRoot.GetEnumNode("GameName").GetValue(p1.GetGameInfo().Name)</div>
                <div class="h5 col-sm-3 text-nowrap" style="margin: 0;">@lang["Platform"] : @p1.GetPlatformInfo().PlatformName</div>
                <div class="h5 text-right col-sm-2 text-nowrap" style="margin: 0;">@lang["GameID"] : @p1.GameID</div>
            </div>
        </div>
}
    @helper tab1(GeniusBull.Game game)
    {
        <div class="col-sm-12">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="col-sm-2">
                        <ul class="list-group">
                            <li class="list-group-item" style="cursor: pointer;" ng-repeat="item in Eprob.Groups" ng-class="item.Eprob==Eprob.Groups_Active ? 'active' : ''" ng-click="Eprob.Groups_SetActive(item.Eprob)">
                                <span class="badge" ng-show="item.Eprob==Eprob.Groups_Select"><i class="fa fa-fw fa-check"></i></span>
                                {{item.Eprob}}
                            </li>
                        </ul>
                        <button class="btn btn-default btn-block" ng-click="Eprob.SaveEprobTable()">@lang["Save"]</button>
                        <button class="btn btn-default btn-block" ng-click="Eprob.Group_SetSelect()">@lang["Set Active"]</button>
                        <button class="btn btn-default btn-block" ng-click="Eprob.Group_Reload()">@lang["Reload"]</button>
                        <button class="btn btn-default btn-block" ng-click="Close_Click()">@lang["Close"]</button>
                    </div>
                    <div class="col-sm-10">
                        <div ng-show="Eprob.Table==null">Loading</div>
                        <table ng-hide="Eprob.Table==null" class="table table-striped table-bordered table-hover">
                            <tr>
                                <th style="text-align: center;">@lang["Symbol"]</th>
                                @for (int i = 0; i < 5; i++)
                                { <th style="text-align: center;">@lang[string.Format("Reel_{0}", i + 1)]</th> }
                            </tr>
                            @foreach (var limit in game.EprobTableLimit)
                            {
                                <tr>
                                    <th class="col-sm-2" style="padding: 0; text-align: center;">@limit.Key</th>
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        <td class="col-sm-2" style="padding: 1px;">
                                            <div style="width: 100%;" class="input-group input-group-sm">
                                                <input type="number" class="form-control" style="border: none;" ng-model="Eprob.Table['@limit.Key'].Reel[@i]" ng-change="Eprob.Calc()" min="@limit.Value.Min[i]" max="@limit.Value.Max[i]" @if (limit.Value.Max[i] == 0) { <text> readonly="readonly" </text> } />
                                                <span class="input-group-addon" style="border: none; padding-left: 0; padding-right: 0; width: 50%">{{Eprob.getRate('@limit.Key', @i) | number:2}}%</span>
                                            </div>
                                        </td>
                                    }
                                </tr>
                            }
                            <tr>
                                <td></td>
                                @for (int i = 0; i < 5; i++)
                                {
                                    <td class="col-sm-2" style="padding: 0px;">
                                        <div style="width: 100%;" class="input-group input-group-sm">
                                            <input type="number" class="form-control" style="border: none;" readonly="readonly" ng-model="Eprob.Result.ReelSum[@i]" />
                                            <span class="input-group-addon" style="border: none; padding-left: 0; padding-right: 0; width: 50%"></span>
                                        </div>
                                    </td>
                                }
                            </tr>
                        </table>
                        @*{{RTP}}*@
                        <div class="panel panel-default">
                            <div class="panel-body">
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Winning Rate</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.WinningRate * 100 | number:6}}%</div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Line RTP</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.Line_RTP}}</div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Free Game RTP</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.FG_RTP}}</div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Jackpot RTP</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.JP_RTP}}</div>
                                </div>
                                <div class="col-sm-12" ng-repeat="BGn in ['BG1','BG2','BG3','BG4','BG5']" ng-show="Eprob.Table.hasOwnProperty(BGn)">
                                    <div class="col-sm-4">{{BGn}} RTP</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.Values[BGn].PSum}}</div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Total RTP</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.Total_RTP}}</div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Jackpot GRAND</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.Values.JP.X5 * 100 | number:12}}%</div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Jackpot MAJOR</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.Values.JP.X4 * 100 | number:12}}%</div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Jackpot MINI</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.Values.JP.X3 * 100 | number:12}}%</div>
                                </div>
                                <div class="col-sm-12">
                                    <div class="col-sm-4">Jackpot MINOR</div>
                                    <div class="col-sm-8 pull-right"> : {{Eprob.Result.Values.JP.X2 * 100 | number:12}}%</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
}

    @helper tab2(GeniusBull.Game game, popups.EditControl edit)
    {
        <div class="col-sm-12">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="col-sm-2">
                        <button class="btn btn-default btn-block" ng-click="@(edit.name).UpdateData()">@lang["Update"]</button>
                        <button class="btn btn-default btn-block" ng-click="@(edit.name).LoadData(true)">@lang["Reload"]</button>
                    </div>
                    <div class="col-sm-10">
                        <div class="panel panel-default">
                            <div class="panel-body">
                                @foreach (string s in game.ConfigKeys)
                                {
                                    <div class="form-group form-group-sm col-sm-12">
                                        <label for="@_id[s]">@s</label>
                                        <input type="text" class="form-control" id="@_id[s]" ng-model="@string.Format("{0}.Row.{1}.Value", edit.name, s)" />
                                        <input type="text" class="form-control" readonly ng-model="@string.Format("{0}.Row.{1}.Description", edit.name, s)" />
                                    </div>
                                }
                                <div class="" ng-class="@(edit.name).err_class()">
                                    <span class="help-block">{{@(edit.name).err_msg()}}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
}
    @helper ctl_text(popups.EditControl edit, string name, string text = null)
    { name = name.Trim(false); string ng_model = string.Format("{0}.Row[{0}.ActiveId]['{1}']", edit.name, name);
    <div class="form-group">
        <label for="@_id[name]" class="col-sm-3 control-label">@(text ?? lang[name])</label>
        <div class="col-sm-9">
            <input type="text" class="form-control" id="@_id[name]" ng-model="@ng_model">
        </div>
    </div>
}
    @helper ctl_chk(popups.EditControl edit, string name, string text = null)
    { name = name.Trim(false); string ng_model = string.Format("{0}.Row[{0}.ActiveId]['{1}']", edit.name, name);
    <div class="form-group">
        <label for="@_id[name]" class="col-sm-3 control-label">@(text ?? lang[name])</label>
        <div class="col-sm-9">
            <input type="checkbox" class="form-control" style="height: 1.5em;" id="@_id[name]" ng-model="@ng_model">
        </div>
    </div>
}
    @helper tab3(GeniusBull.Game game, popups.EditControl edit)
    { string active = string.Format("{0}.Row[{0}.ActiveId]", edit.name);
    <div class="col-sm-12">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="col-sm-2">
                    <ul class="list-group">
                        <li class="list-group-item" style="cursor: pointer;" ng-repeat="item in @(edit.name).Row" ng-class="item.Id==@(edit.name).ActiveId ? 'active' : ''" ng-click="@(edit.name).ActiveId = item.Id">
                            {{item.Id}}
                        </li>
                    </ul>
                    <button class="btn btn-default btn-block" ng-click="@(edit.name).UpdateData()">@lang["Update"]</button>
                    <button class="btn btn-default btn-block" ng-click="@(edit.name).LoadData(true)">@lang["Reload"]</button>
                </div>
                <div class="col-sm-10">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            @*{{@active}}*@
                            @if (game.TableConfigType == typeof(GeniusBull.TexasConfig))
                            {
                                @ctl_text(edit, "TableName_EN      ")
                                @ctl_text(edit, "TableName_CHS     ")
                                @ctl_text(edit, "TableName_CHT     ")
                                @ctl_text(edit, "SmallBlind        ")
                                @ctl_text(edit, "BigBlind          ")
                                @ctl_text(edit, "SecondsToCountdown")
                                @ctl_text(edit, "SeatMax           ")
                                @ctl_text(edit, "TableMax          ")
                            }
                            else if (game.TableConfigType == typeof(GeniusBull.DouDizhuConfig))
                            {
                                @ctl_text(edit, "TableName_EN      ")
                                @ctl_text(edit, "TableName_CHS     ")
                                @ctl_text(edit, "TableName_CHT     ")
                                @ctl_text(edit, "BaseValue         ")
                                @ctl_text(edit, "SecondsToCountdown")
                                @ctl_chk(edit, " SnatchLord        ")
                                @ctl_chk(edit, " Fine              ")
                                @ctl_chk(edit, " MissionMode       ")
                                @ctl_text(edit, "LuckyHand         ")
                                @ctl_text(edit, "FakePlayerNum     ")
                            }
                            else if (game.TableConfigType == typeof(GeniusBull.TwMahjongConfig))
                            {
                                @ctl_text(edit, "Antes        ")
                                @ctl_text(edit, "Tai          ")
                                @ctl_text(edit, "RoundType    ")
                                @ctl_text(edit, "ThinkTime    ")
                                @ctl_text(edit, "ServiceCharge")
                                @ctl_text(edit, "MoneyLimit   ")
                            }
                            <div class="" ng-class="@(edit.name).err_class()">
                                <span class="help-block">{{@(edit.name).err_msg()}}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
}
else
{
    @section head {
        <script type="text/javascript">
            $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
                window.$grid1 = $scope['@grid.scope_id'] = $('#_grid1').jqxGridEx($.n(@grid), {
                    columns: [
                       {
                           name: '_popup1', get_url: function (data) {
                               return '@Url.Action("PlatformGamesDetails")?' + data.ID;
                           },
                       },
                    ],
                });
            });
        </script>

    }
    <div id="toolbar" class="hidden">
        @toolbars.GridRefresh(grid)
    </div>
    <div id="_grid1"></div>
    @modal_dialog
}