@using jqx
@{
    Layout = "../Shared/_Layout1.cshtml";
    ViewBag.Title = "Enums";
    string url1 = Url.GetActionUrl<ams.Controllers.LangApiController>("get_page");
    string url2 = Url.GetActionUrl<ams.Controllers.LangApiController>("set_page");
}
@section head {
    @Bundles.RenderStyles(this, null, false)
}
@section left {
    <div @(new jqxTree { settings = "$scope.tree1_opts", instance = "$scope.tree1", width = "100%", height = "100%", animationHideDuration = 0, animationShowDuration = 0, })></div>
}
<div @(new jqxGrid
 {
     pager = { pageable = false, pagermode = pagermode.@default, },
     filter = { filterable = false, },
     sorting = { sortable = true, },
     editable = true,
     editmode = editmode.selectedcell,
     selectionmode = selectionmode.singlerow,
     showstatusbar = true,
     autobind = false,
     showeverpresentrow = false,
     everpresentrowactionsmode = rowactionsmode.popup
 })>
    <div @(new jqxGrid.toolbar { showtoolbar = true }) class="btn-group btn-group-sm fill">
        <a class="btn btn-default" ng-click="addrow()"><i class="fa fa-fw fa-plus"></i></a>
        <a class="btn btn-default" ng-click="grid1.deleteselectedrow()"><i class="fa fa-fw fa-trash-o"></i></a>
        <a class="btn btn-default" ng-click="temp_data.savedata()"><i class="fa fa-fw fa-save"></i></a>
        <a class="btn btn-default" ng-click="load_page()"><i class="fa fa-fw fa-refresh"></i></a>
        <a class="btn btn-default hidden"><i class="fa fa-fw fa-user-plus text-primary"></i></a>
        <a class="btn btn-default hidden"><i class="fa fa-fw fa-user-plus text-success"></i></a>
        <a class="btn btn-default hidden"><i class="fa fa-fw fa-user-plus text-info"></i></a>
        <a class="btn btn-default hidden"><i class="fa fa-fw fa-user-plus text-warning"></i></a>
        <a class="btn btn-default hidden"><i class="fa fa-fw fa-user-plus text-danger"></i></a>
        <a class="btn btn-link pull-right">{{table_ver}}</a>
    </div>
    <div @(new jqxGrid.source { id = "path", url = "./" })></div>

    @Bundles.RenderScripts(this, null, false)
    <script type="text/javascript">
        /// <reference path="~/jqwidgets/jqx-all.js" />
        $(document).on('ng-app-init', function () {
            var tree_delay1 = null, tree_delay2 = 0;
            $scope.tree1_opts = {
                events: {
                    //'*': function (event) {
                    //    console.log(event);
                    //},
                    initialized: function (event) {
                        $.invoke_api({
                            url: '@(Url.GetActionUrl<ams.Controllers.LangApiController>("get_pages"))',
                            success: function (data, textStatus, jqXHR) {
                                $scope.tree1.addTo(data);
                                var n = $scope.tree1.getItems();
                                if (n.length > 0) {
                                    $scope.tree1.expandItem(n[0]);
                                    $scope.tree1.selectItem(n[0]);
                                }
                                event.owner.focus();
                            }
                        });
                        event.owner.focus();
                    },
                    select: function (event) {
                        var item = event.owner.getItem(event.args.element);
                        console.log('select', item);
                        if (tree_delay1 != null)
                            clearTimeout(tree_delay1);
                        tree_delay1 = setTimeout($scope.load_page, tree_delay2);
                        tree_delay2 = 1000;
                    },
                }
            };

            var temp_data = $scope.temp_data = new function () {
                var _this = this;
                (this.reset = function () {
                    _this.data = new Array();
                })();
                this.savedata = function () {
                    console.log(_this);
                    $scope.grid1.set_url('@url2');
                    //$scope.grid1.updatebounddata('data');
                }

                this.set_data = function (rowid, row) {
                    var data;
                    if (row == null) {
                        data = { rowid: rowid };
                    } else {
                        data = {
                            rowid: rowid,
                            path: row.path,
                            name: row.name,
                            values: {
                                '9': row['en-us'],
                                '4': row['zh-hans'],
                                '31748': row['zh-hant']
                            }
                        };
                        for (var i = 0; i < _this.data.length; i++) {
                            if (_this.data[i].rowid == rowid) {
                                _this.data[i] = data;
                                return;
                            }
                        }
                        _this.data.push(data);
                    }
                };
            };

            $scope.grid1_opts = {
                events:{
                    '*': function (event) {
                        console.log(event);
                    },
                    initialized: function (event) {
                        $scope.grid1 = event.owner;
                    },
                    cellselect: function (event) {
                        //$scope.grid1.begincelledit(event.args.rowindex, event.args.datafield);
                    },
                    rowselect: function (event) {
                        //$scope.select_row = event.args.row;
                        //$scope.$apply();
                    },
                },
                source: {
                    formatData: function (data) {
                        if (temp_data.data.length > 0) {
                            data.update_value = temp_data.data;
                            temp_data.reset();
                        }
                        data.select_value = $scope.tree1.getSelectedValue();
                        //console.log('formatData', arguments);
                        return JSON.stringify(data);
                    },
                    beforeprocessing: function (data, state, xhr) {
                        //console.log('beforeprocessing', arguments);
                    },
                    loadComplete: function (data) {
                        //console.log('loadComplete', arguments);
                        $scope.table_ver = data.ver;
                        $scope.grid1.selectrow(0);
                        $scope.$apply();
                    },
                    loadError: function (xhr, status, error) {
                        //console.log('loadError', arguments);
                    },
                    addrow: function (rowid, rowdata, position, commit) {
                        temp_data.set_data(rowid, rowdata);
                        console.log('addrow', temp_data.data);
                        commit(true);
                    },
                    deleterow: function (rowid, commit) {
                        temp_data.set_data(rowid, null);
                        console.log('deleterow', temp_data.data);
                        commit(true);
                    },
                    updaterow: function (rowid, newdata, commit) {
                        temp_data.set_data(rowid, newdata);
                        console.log('updaterow', temp_data.data);
                        commit(true);
                    },
                    //datafields: [
                    //    { name: 'path', type: 'string' },
                    //    { name: 'name', type: 'string' },
                    //    { name: 'en-us', type: 'string', map: 'values>9' },
                    //    { name: 'zh-hant', type: 'string', map: 'values>31748' },
                    //    { name: 'zh-hans', type: 'string', map: 'values>4' },
                    //    { name: 'values', type: 'object' },
                    //],
                },
                columns: [
                    // @(new jqxGrid.column { })
                    $.jqx.columns.row_number(),
                    //$.jqx.columns.row_command(),
                    { text: '@lang["name   "]', dataField: { name: '@trim["name   "]', type: 'string' }, width: 150, align: 'center' },
                    { text: '@lang["en-us  "]', dataField: { name: '@trim["en-us  "]', type: 'string', map: 'values>9' }, width: 150, align: 'center' },
                    { text: '@lang["zh-hant"]', dataField: { name: '@trim["zh-hant"]', type: 'string', map: 'values>31748' }, width: 150, align: 'center' },
                    { text: '@lang["zh-hans"]', dataField: { name: '@trim["zh-hans"]', type: 'string', map: 'values>4' }, width: 150, align: 'center' },
                    { text: '@lang["path   "]', dataField: { name: '@trim["path   "]', type: 'string' }, width: 999, align: 'center', hidden: true, editable: false },
                ],
            };

            $scope.load_page = function () {
                $scope.grid1.set_url('@url1');
                //$scope.grid1.updatebounddata('data');
            }

            $scope.addrow = function () {
                //$scope.grid1.host.jqxGrid('showeverpresentrow', true)
                //console.log($scope.grid1.editcell);
                //if ($scope.grid1.editcell != null) {
                //    $scope.grid1.endcelledit($scope.grid1.editcell.row, $scope.grid1.editcell.datafield, true);
                //}
                //console.log($scope.grid1.editcell);
                if ($scope.grid1.addrow(null, {}, 'first')) {
                    $scope.grid1.selectrow(0);
                    //$scope.grid1.selectcell(0, 'name');
                    //$scope.grid1.begincelledit(0, 'name');
                }
            }
        });
    </script>
</div>