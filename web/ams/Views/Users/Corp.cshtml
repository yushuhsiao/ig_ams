@using jqx
@using ams
@using ams.Data
@using ams.Controllers;
@{
    popups.dialog modal_dialog = new popups.dialog(this, "_modal1");
    ViewBag.Title = "Corp";
    jqxGrid grid = new jqxGrid<ams.Data.CorpInfo>
    {
        page = this,
        scope_id = "grid1",
        showtoolbar = "#toolbar",
        source = { id = "ID", url = Url.GetActionUrl<CorpAccountApiController>("list"), datafields = new[] { new jqxGrid.datafield { name = "Balance" } } },
        //rowdetail = { rowdetails = true, showrowdetailscolumn = true, rowdetailshidden = true, rowdetailsheight = 200 },
        pager = { pageable = true, server_paging = true, pagermode = pagermode.simple, },
        filter = { filterable = true, server_filtering = true, showfilterrow = false, showfiltermenuitems = false, },
        sorting = { sortable = true, server_sorting = true, },
        row_numbers = true,
        //editable = true,
        //editmode = editmode.programmatic,
        //selectedrowindex = 0,
        columns = new jqxGrid._column[] {
            new jqx_column.ActionPopup(this, "_popup1") { ButtonText = "Details", modal = modal_dialog, cellsalign = alignment.center },
            new jqx_column.ID1(this) { text = lang["Corp ID"] },
            new jqx_column.ver(this),
            new jqx_column.UserName(this) { text = lang["Corp Name"] },
            new jqx_column.NickName(this) { hidden = true },
            new jqx_column._string(this, "User01R") { hidden = true },
            new jqx_column._string(this, "User01W") { hidden = true },
            new jqx_column._string(this, "Log01R") { hidden = true },
            new jqx_column._string(this, "Log01W") { hidden = true },
            new jqx_column._number(this, "Mode") { hidden = true },
            new jqx_column.Amount(this, "TotalBalance", lang["TotalBalance"] ),
            new jqx_column.Amount(this, "Balance1", lang["Balance1"] ),
            new jqx_column.Amount(this, "Balance2", lang["Balance2"] ),
            new jqx_column.Amount(this, "Balance3", lang["Balance3"] ) { hidden = true },
            new jqx_column.Currency(this),
            new jqx_column._string(this, "Prefix"),
            //new jqxGrid._column { _datafield = { name = "Currency    ", type = dataFieldType._string }, text = lang["Currency    "], width = 100, hidden = false },
            //new jqxGrid._column { _datafield = { name = "Prefix      ", type = dataFieldType._string }, text = lang["Prefix      "], width = 050, },
            new jqx_column.Active(this),
            new jqx_column.CreateTime(this), new jqx_column.CreateUser(this), new jqx_column.ModifyTime(this), new jqx_column.ModifyUser(this),
        }
    };
    widgets.layout_1(this, grid);
}
@if (IsDetails)
{
    int? corpID = Request.QueryString.ToString().ToInt32();
    CorpInfo corp = CorpInfo.GetCorpInfo(id: corpID);
    popups.EditControl edit1 = new popups.EditControl(this, "edit1") { row = corp, grid = grid, updaterow = true };
    popups.EditControl edit2 = new popups.EditControl(this, "edit2") { };
    popups.nav_tabs tabs = new popups.nav_tabs(
        new popups.tab("a") { body = () => tab1(edit1), title = lang["General"], },
        new popups.tab("b") { body = () => tab2(edit2), title = lang["Corp Agent"], },
        new popups.tab("c") { body = () => tab3(null), title = lang[""], Visible = false });
    @tabs
    @section head {
        @popups.popup_css()
        <script type="text/javascript">
            $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
                new $.EditControl($.n(@edit1), {
                    OnUpdate: function (data, jqXHR, settings) {
                        settings.url = '@(Url.GetActionUrl<CorpAccountApiController>("set"))';
                    }
                });
                new $.EditControl($.n(@edit2), {
                    OnLoading: function (data, jqXHR, settings) {
                        settings.url = '@(Url.GetActionUrl<AgentAccountApiController>("get"))';
                        settings.data = { CorpID: '@corp.ID', ID: '@corp.ID', UserName: '@corp.UserName' };
                    },
                    OnUpdate: function (data, jqXHR, settings) {
                        settings.url = '@(Url.GetActionUrl<AgentAccountApiController>("set"))';
                    }
                });
                $('@tabs["b"].selector').on('show.bs.tab', function (e) {
                    $scope['@edit2.name'].LoadData();
                });
            });
        </script>
    }
    @helper tab1(popups.EditControl edit)
    {
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    @edit.TextBox("     ID      ")
                    @edit.TextBox("     UserName")
                    @edit.TextBox("     Currency", width: 4)
                    @edit.CheckBox("    Active  ", width: 4)
                    @edit.TextInput("   Prefix  ", width: 2)
                    @edit.CommandsEdit()
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    @edit.TextInput("User01R")
                    @edit.TextInput("User01W")
                    @edit.TextInput("Log01R ")
                    @edit.TextInput("Log01W ")
                </div>
            </div>
        </div>
    }
    @helper tab2(popups.EditControl edit)
    {
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    @edit.TextBox("     ID         ", lang[" Agent ID   "])
                    @edit.TextBox("     UserName   ", lang[" UserName   "])
                    @edit.TextInput("   NickName   ", lang[" NickName   "])
                    @edit.Active3(lang["State      "], lang["Active     "], lang["Game"], "Active1", "Active2")
                    @edit.Password2("   Password1  ", lang[" Password   "])
                    @edit.Password2("   Password2  ", lang["  Confirm Password"])
                    @edit.CommandsEdit()
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    @edit.SwitchedNumberInput(lang["MaxDepth "], "MaxDepth ", "MaxDepthEnabled ", text2: lang["Enabled"], min: 0)
                    @edit.SwitchedNumberInput(lang["MaxAgent "], "MaxAgent ", "MaxAgentEnabled ", text2: lang["Enabled"], min: 0)
                    @edit.SwitchedNumberInput(lang["MaxAdmin "], "MaxAdmin ", "MaxAdminEnabled ", text2: lang["Enabled"], min: 0)
                    @edit.SwitchedNumberInput(lang["MaxMember"], "MaxMember", "MaxMemberEnabled", text2: lang["Enabled"], min: 0)
                </div>
            </div>
        </div>
    }
    @helper tab3(popups.EditControl edit)
    { 
    }
}
else
{
    popups.AddControl add = new popups.AddControl(this, grid);
    @section head {
        <script type="text/javascript">
            $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
                window.$grid1 = $scope['@grid.scope_id'] = $('#_grid1').jqxGridEx($.n(@grid), {
                    $scope: $scope,
                    columns: [{
                        name: '_popup1', get_url: function (data) {
                            return '@Url.Action("CorpDetail")?' + data.ID;
                        },
                    }],
                });
                var add = new $.EditControl($.n(@add), {
                    OnCreate: function() {
                        return {
                            UserName: 'ig', Mode: '@CorpMode.Mode1', Currency: '@CurrencyCode.TWD', Prefix: '', Password1: '', Password2: '',
                            User01R: '@DB.DefaultUser01R',
                            User01W: '@DB.DefaultUser01W',
                            Log01R: '@DB.DefaultLog01R',
                            Log01W: '@DB.DefaultLog01W',
                        };
                    },
                    OnUpdate: function (data, jqXHR, settings) {
                        if (data.Password1 == data.Password2) {
                            data.Password = data.Password1;
                            delete data.Password1;
                            delete data.Password2;
                        }
                        settings.url = '@(Url.GetActionUrl<CorpAccountApiController>("add"))';
                    },
                    OnUpdateComplete: function(data, textStatus, jqXHR){
                        $grid1.addrow(null, data, 'first');
                    },
                });
            });
        </script>
    }

    @helper tab_add(jqxGrid grid, popups.AddControl add)
    {
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading"><h3 class="panel-title">@lang["General"]</h3></div>
                <div class="panel-body">
                    @add.NumberInput("ID       ", min: UserID.corp_min, max: UserID.corp_max)
                    @add.TextInput("  UserName ")
                    @add.Password("   Password1", lang["Password        "])
                    @add.Password("   Password2", lang["Confirm Password"])
                    @add.Currency("   Currency ")
                    @add.TextInput("  Prefix   ", width: 2)
                    @add.CheckBox("   Active   ")
                    @add.CommandsAdd()
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading"><h3 class="panel-title">@lang["Connection Strings"]</h3></div>
                <div class="panel-body">
                    @add.TextInput("User01R", width: 8)
                    @add.TextInput("User01W", width: 8)
                    @add.TextInput("Log01R ", width: 8)
                    @add.TextInput("Log01W ", width: 8)
                </div>
            </div>
        </div>
    }
    <div id="toolbar" class="hidden">
        @add.button()
        @toolbars.GridRefresh(grid)
    </div>
    <div id="_grid1"></div>
    @modal_dialog
    @add.modal(() => tab_add(grid, add))
}