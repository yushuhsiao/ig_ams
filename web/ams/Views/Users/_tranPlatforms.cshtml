@using jqx
@using ams
@{
    bool hist = false; if (this.Model is bool) { hist = (bool)this.Model; }
    ViewBag.PanelBody = widgets.tran_size;
    Type apiControllerType = ViewBag.apiControllerType;

    _WebViewPage page = ViewBag.Page;
    string link1 = ViewBag.Link1;
    string link2 = ViewBag.Link2;


    jqxGrid grid = new jqxGrid<ams.tran2.PlatformTranData>
    {
        page = this,

        scope_id = "grid1",
        showtoolbar = "#toolbar",
        source = { id = "ID", url = Url.GetActionUrl(apiControllerType, hist ? "hist" : "list") },
        pager = { pageable = true, pagermode = pagermode.simple, },
        filter = { filterable = true, server_filtering = true, showfilterrow = true, showfiltermenuitems = false, },
        sorting = { sortable = true, server_sorting = true, },

        editmode = editmode.selectedcell,
        selectionmode = selectionmode.singlerow,
        //selectedrowindex = 0,
        //rowdetails = true,
        //rowdetailstemplate = new { rowdetails= "<div style='margin: 10px;'><ul style='margin-left: 30px;'><li class='title'></li><li>Notes</li></ul><div class='information'></div><div class='notes'></div></div>", rowdetailsheight= 200 },
        columns = new jqxGrid._column[] {
            new jqx_column.ver(this),
            new jqx_column.CorpID(this) { },
            new jqx_column.CorpName(this, root: false) { },
            new jqx_column.DateTime(this, "RequestTime", lang["RequestTime"] ) { },
            new jqx_column._string(this, "SerialNumber", lang["SerialNumber"]) { width = 150 },
            new jqx_column.LogType(this) { },
            new jqx_column._string(this, "State", lang["State"] ) { },
            new jqx_column.PlatformID(this) { },
            new jqx_column.PlatformName(this) { },
            new jqx_column.UserID(this, "UserID") { },
            new jqx_column.UserName(this, "UserName") { },
            new jqx_column.Amount(this, "Amount1",lang["Amount1"]) { },
            new jqx_column.Amount(this, "PlatformBalance",lang["PlatformBalance"]) { },
            new jqx_column.Currency(this, "CurrencyA") { hidden = false },
            new jqx_column.Currency(this, "CurrencyB") { hidden = false },
            new jqx_column.Amount(this, "CurrencyX",lang["CurrencyX"]) { hidden = false },
            new jqx_column.DateTime(this, "AcceptTime", lang["AcceptTime"] ) { },
            new jqx_column.Op_User(this, " AcceptUser", lang["AcceptUser"] ) { },
            new jqx_column._boolean(this, "Finished", lang["Finished"] ) { },
            new jqx_column.DateTime(this, "FinishTime", lang["FinishTime"] ) { },
            new jqx_column.Op_User(this, " FinishUser", lang["FinishUser"] ) { },
            new jqx_column._string(this, "RequestIP", lang["RequestIP"] ) { },
            new jqx_column.Op_User(this, " RequestUser", lang["RequestUser"] ) { },
            new jqx_column.DateTime(this, "LifeTime", lang["LifeTime"] ) { },
            new jqx_column.ID2(this, "TranID" ,lang["TranID"]) { },
        }
    };
    widgets.layout_1(this, grid);
}
@if (hist)
{
    @section head {
        <script type="text/javascript">
            $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
                window.$grid1 = $scope['@grid.scope_id'] = $('#_grid1').jqxGridEx($.n(@grid), {
                    $scope: $scope,
                });
            });
        </script>
    }
    <div id="toolbar" class="hidden">
        @toolbars.HistoryLink(grid, link1, page.lang["List"])
        @toolbars.GridRefresh(grid)
    </div>
}
else
{
    popups.AddControl add = new popups.AddControl(this, grid);
    @section head {
        <script type="text/javascript">
            $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
                window.$grid1 = $scope['@grid.scope_id'] = $('#_grid1').jqxGridEx($.n(@grid), {
                    $scope: $scope,
                });
                var add = new $.EditControl($.n(@add), {
                    OnCreate: function () {
                        return { CorpName: $grid1.getFilterValue("CorpName"), UserName: '', Amount1: 0, Amount2: 0, Amount3: 0 };
                    },
                    OnUpdate: function (data, jqXHR, settings) { },
                    OnUpdateComplete: function (data, textStatus, jqXHR) {
                        $grid1.addrow(null, data, 'first');
                    },
                });
            });
        </script>
    }
    @helper tab_add(jqxGrid grid, popups.AddControl add, Type apiControllerType)
    {
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading"><h3 class="panel-title">@lang["General"]</h3></div>
                <div class="panel-body">
                    @add.PlatformList("PlatformName ")
                    @add.TextInput("   UserName     ")
                    @add.NumberInput(" Amount1      ", min: 0)
                    @add.CommandsAddx(label_width: 0, btn_width: 4, hr: true, url1: Url.GetActionUrl(apiControllerType, "add"), url2: Url.GetActionUrl(apiControllerType, "addx"))
                </div>
            </div>
        </div>
        <div class="col-sm-6 hidden">
            <div class="panel panel-default">
                <div class="panel-heading"><h3 class="panel-title">@lang[""]</h3></div>
                <div class="panel-body"></div>
            </div>
        </div>
    }
    <div id="toolbar" class="hidden">
        @toolbars.HistoryLink(grid, link2)
        @toolbars.GridRefresh(grid)
        <div class="pull-left "><i class="fa fa-fw"></i></div>
        @add.button()
        @toolbars.tran_op(page, grid, lang["Accept1"], "fa-check", Url.GetActionUrl(apiControllerType, "accept1"))
        @toolbars.tran_op(page, grid, lang["Accept2"], "fa-check", Url.GetActionUrl(apiControllerType, "accept2"))
        @toolbars.tran_op(page, grid, lang["Delete"], "fa-trash", Url.GetActionUrl(apiControllerType, "delete"))
    </div>
    @add.modal(() => tab_add(grid, add, ViewBag.apiControllerType))
}
<div id="_grid1"></div>
@RenderBody()