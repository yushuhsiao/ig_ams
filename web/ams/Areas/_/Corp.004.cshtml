@using jqx
@using ams
@using ams.Controllers;
@{
    ViewBag.Title = "Corp";
    const string grp_agent = "agent";
    jqxGrid grid = new jqxGrid<ams.Data.CorpInfo> {
        page = this,
        scope_id = "grid1",
        //scope_prop = "sel_row",
        source = {
            id = "ID", url = Url.GetActionUrl<CorpAccountApiController>("list"),
            datafields = new [] { new jqxGrid.datafield { name = "Balance" } }
        },
        pager = { pagermode = pagermode.simple, },
        filter = { filterable = true, server_filtering = true, showfilterrow = false, showfiltermenuitems = false, },
        sorting = { sortable = true, server_sorting = true, },
        editmode = editmode.selectedcell,
        selectionmode = selectionmode.singlerow,
        selectedrowindex = 0,
        columns = new[] {
            new jqxGrid._column { _datafield = { name = "ID          ", type = dataFieldType._number }, text = lang["Corp ID     "], width = 100 },
            new jqxGrid._column { _datafield = { name = "ver         ", type = dataFieldType._number }, text = lang["ver         "], width = 100, hidden = true },
            new jqxGrid._column { _datafield = { name = "UserName    ", type = dataFieldType._string }, text = lang["Corp Name   "], width = 100 },
            new jqxGrid._column { _datafield = { name = "DisplayName ", type = dataFieldType._string }, text = lang["DisplayName "], width = 100, hidden = true },
            new jqxGrid._column { _datafield = { name = "User01R     ", type = dataFieldType._string }, text = lang["User01R     "], width = 100, hidden = true },
            new jqxGrid._column { _datafield = { name = "User01W     ", type = dataFieldType._string }, text = lang["User01W     "], width = 100, hidden = true },
            new jqxGrid._column { _datafield = { name = "Log01R      ", type = dataFieldType._string }, text = lang["Log01R      "], width = 100, hidden = true },
            new jqxGrid._column { _datafield = { name = "Log01W      ", type = dataFieldType._string }, text = lang["Log01W      "], width = 100, hidden = true },
            new jqxGrid._column { _datafield = { name = "Mode        ", type = dataFieldType._string }, text = lang["Mode        "], width = 100, hidden = true },
            new jqxGrid._column { _datafield = { name = "TotalBalance", type = dataFieldType._number }, text = lang["TotalBalance"], width = 080, hidden = true },
            new jqxGrid._column { _datafield = { name = "Balance1    ", type = dataFieldType._number }, text = lang["Balance1    "], width = 080 },
            new jqxGrid._column { _datafield = { name = "Balance2    ", type = dataFieldType._number }, text = lang["Balance2    "], width = 080 },
            new jqxGrid._column { _datafield = { name = "Balance3    ", type = dataFieldType._number }, text = lang["Balance3    "], width = 080, hidden = true },
            new jqxGrid._column { _datafield = { name = "Currency    ", type = dataFieldType._string }, text = lang["Currency    "], width = 100, hidden = false },
            new jqxGrid._column { _datafield = { name = "Prefix      ", type = dataFieldType._string }, text = lang["Prefix      "], width = 050, },
            new jqx_column.Active(this),
            new jqxGrid._columns.DateTime { _datafield = { name = "CreateTime   " }, text = lang["CreateTime    "] },
            new jqxGrid._columns.User____ { _datafield = { name = "CreateUser   " }, text = lang["CreateUser    "] },
            new jqxGrid._columns.DateTime { _datafield = { name = "ModifyTime   " }, text = lang["ModifyTime    "] },
            new jqxGrid._columns.User____ { _datafield = { name = "ModifyUser   " }, text = lang["ModifyUser    "] },
        }
    };
    widgets.layout_grid_detail(this, grid);
}
@section head {
    <script type="text/javascript">
        $(document).on('ng-app-init', function (e, $scope, $compile, $http) {
            window.$grid1 = $scope['@grid.scope_id'] = $('#_grid1').jqxGridEx($.n(@grid), {
                $scope: $scope,
                columns: [ ],
                source: {
                    datafields: [ ],
                },
                ext: {
                    grps: {
                        '': {
                            OnUpdate: function (rowid, rowdata, data, jqXHR, settings) {
                                settings.url = '@(Url.GetActionUrl<CorpAccountApiController>("set"))';
                            },
                        },
                        '@grp_agent': {
                            TabIndex: 1,
                            OnUpdate: function (rowid, rowdata, data, jqXHR, settings) {
                                settings.url = '@(Url.GetActionUrl<AgentAccountApiController>("set"))';
                                if (data.Password1 === data.Password2)
                                    data.Password = data.Password1;
                                data.CorpName = data.UserName;
                            },
                            OnLoading: function (rowid, rowdata, jqXHR, settings) {
                                if (this.data == null) {
                                    settings.url = '@(Url.GetActionUrl<AgentAccountApiController>("get"))';
                                    settings.data = { CorpID: rowdata.ID, CorpName: rowdata.UserName, ID: rowdata.ID };
                                }
                            },
                        },
                        //'bbb': {}
                    },
                    //add_url: '@(Url.GetActionUrl<CorpAccountApiController>("add"))',
                    //update_url: '@(Url.GetActionUrl<CorpAccountApiController>("set"))',
                    OnAddingRow: function (addRow) {
                        for (var id = '@UserID.corp_min', id_max = '@UserID.corp_max'; id < id_max; id++) {
                            var row = this.getrowdatabyid(id);
                            if (row == null) {
                                addRow(id, {
                                    UserName: 'ig' + id, Mode: '@CorpMode.Mode1', Currency: '@CurrencyCode.TWD', Prefix: '',
                                    Password1: '', Password2: '',
                                    User01R: '@DB.DefaultUser01R',
                                    User01W: '@DB.DefaultUser01W',
                                    Log01R: '@DB.DefaultLog01R',
                                    Log01W: '@DB.DefaultLog01W',
                                });
                                return;
                            }
                        }
                    },
                    OnAddRow: function (row, jqXHR, settings) {
                        if (row.Password1 === row.Password2)
                            row.Password = row.Password1;
                        else return false;
                        settings.url = '@(Url.GetActionUrl<CorpAccountApiController>("add"))';
                    },
                    OnUpdateRow: function (rowid, rowdata, data, jqXHR, settings) {
                        settings.url = '@(Url.GetActionUrl<CorpAccountApiController>("set"))';
                    },
                },
                event: {
                    //'*': function (event) {
                    //    console.log(event.type, event);
                    //},
                    //initialized: function (event) {
                    //    $scope.active_row = event.owner.extobj.getSelectedRow();
                    //    $scope.$applyAsync();
                    //},
                    //rowselect: function (event) {
                    //},
                    //bindingcomplete: function (event) {
                    //        event.owner.extobj.reset()
                    //    event.owner.selectrow(0)
                    //    event.owner.focus()
                    //        $scope.$applyAsync();
                    //},
                },
            });
            //$(document).ready(function () {
            //    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            //        console.log(arguments);
            //    });
            //});
        });
    </script>
}
@section toolbar {
    @toolbars.GridAdd(grid)
    @toolbars.GridRefresh(grid)
}
@section add_form {
    <section class="container-fluid form-horizontal">
        <div class="row">
            <div class="col-sm-6">
                <div class="panel panel-default">
                    <div class="panel-heading"><h3 class="panel-title">@lang["General"]</h3></div>
                    <div class="panel-body">
                        @widgets.NumberInput("                   ", grid, "ID       ", addonly: true, min: UserID.corp_min, max: UserID.corp_max)
                        @widgets.TextInput("                     ", grid, "UserName ", addonly: true)
                        @widgets.Password(lang["Password        "], grid, "Password1", addonly: true)
                        @widgets.Password(lang["Confirm Password"], grid, "Password2", addonly: true)
                        @widgets.Currency("                      ", grid, "Currency ", addonly: true)
                        @widgets.TextInput("                     ", grid, "Prefix   ", addonly: true, width: 2)
                        @widgets.CheckBox("                      ", grid, "Active   ", addonly: true)
                        @widgets.CommandsAdd(grid)
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="panel panel-default">
                    <div class="panel-heading"><h3 class="panel-title">@lang["Connection Strings"]</h3></div>
                    <div class="panel-body">
                        @widgets.TextInput("", grid, "User01R", addonly: true, width: 8)
                        @widgets.TextInput("", grid, "User01W", addonly: true, width: 8)
                        @widgets.TextInput("", grid, "Log01R", addonly: true, width: 8)
                        @widgets.TextInput("", grid, "Log01W", addonly: true, width: 8)
   </div>
                </div>
            </div>
        </div>
        <div class="row hidden">
            <div class="col-sm-6">
                <div class="panel panel-default">
                    <div class="panel-body">
                    </div>
                </div>
            </div>
        </div>
    </section>
}
@section edit_form {
    <section class="container-fluid form-horizontal">
        <ul class="nav nav-pills">
            <li class="active"><a href="" data-toggle="tab" data-target=".tab1" ng-click="grid1.tab_index=0">@lang["General"]</a></li>
            <li class=""><a href="" data-toggle="tab" data-target=".tab2" ng-click="grid1.tab_index=1">@lang["Corp Agent"]</a></li>
            <li class="hidden"><a href="" data-toggle="tab" data-target=".tab3">@lang["Agent Settings"]</a></li>
            <li class="hidden"><a href="" data-toggle="tab" data-target=".tab4">@lang["Admin Settings"]</a></li>
            <li class="hidden"><a href="" data-toggle="tab" data-target=".tab5">@lang["Member Settings"]</a></li>
        </ul>
        <div class="tab-content">
            <div class="tab1 row tab-pane fade in active">
                <div class="col-sm-6">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            @widgets.TextBox("  ", grid, "ID      ")
                            @widgets.TextBox("  ", grid, "UserName")
                            @widgets.TextBox("  ", grid, "Currency", width: 4)
                            @widgets.CheckBox(" ", grid, "Active  ", width: 4)
                            @widgets.TextInput("", grid, "Prefix  ", width: 2)
                            @widgets.CommandsEdit(grid)
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            @widgets.TextInput("", grid, "User01R")
                            @widgets.TextInput("", grid, "User01W")
                            @widgets.TextInput("", grid, "Log01R")
                            @widgets.TextInput("", grid, "Log01W")
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab2 row tab-pane fade">
                <div class="col-sm-6">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            @widgets.TextBox(lang["Agent ID        "], grid, "ID         ", grp_name: grp_agent)
                            @widgets.TextBox(lang["UserName        "], grid, "UserName   ", grp_name: grp_agent)
                            @widgets.TextInput(lang["DisplayName   "], grid, "DisplayName", grp_name: grp_agent)
                            @widgets.Active3(lang["State"], lang["Active"], lang["Game"], grid, "Active1", "Active2", grp_name: grp_agent)
                            @widgets.Password2(lang["Password        "], grid, "Password1", grp_name: grp_agent)
                            @widgets.Password2(lang["Confirm Password"], grid, "Password2", grp_name: grp_agent)
                            @widgets.CommandsEdit(grid, grp_name: grp_agent)
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            @widgets.SwitchedNumberInput(lang["MaxDepth "], grid, "MaxDepth ", "MaxDepthEnabled ", text2: lang["Enabled"], min: 0, grp_name: grp_agent)
                            @widgets.SwitchedNumberInput(lang["MaxAgent "], grid, "MaxAgent ", "MaxAgentEnabled ", text2: lang["Enabled"], min: 0, grp_name: grp_agent)
                            @widgets.SwitchedNumberInput(lang["MaxAdmin "], grid, "MaxAdmin ", "MaxAdminEnabled ", text2: lang["Enabled"], min: 0, grp_name: grp_agent)
                            @widgets.SwitchedNumberInput(lang["MaxMember"], grid, "MaxMember", "MaxMemberEnabled", text2: lang["Enabled"], min: 0, grp_name: grp_agent)
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab3 row tab-pane fade"><div class="col-sm-6"><div class="panel panel-default"><div class="panel-body">3</div></div></div><div class="col-sm-6"><div class="panel panel-default"><div class="panel-body">3</div></div></div></div>
            <div class="tab4 row tab-pane fade"><div class="col-sm-6"><div class="panel panel-default"><div class="panel-body">4</div></div></div><div class="col-sm-6"><div class="panel panel-default"><div class="panel-body">4</div></div></div></div>
            <div class="tab5 row tab-pane fade"><div class="col-sm-6"><div class="panel panel-default"><div class="panel-body">5</div></div></div><div class="col-sm-6"><div class="panel panel-default"><div class="panel-body">5</div></div></div></div>
        </div>
    </section>
}
<div id="_grid1"></div>